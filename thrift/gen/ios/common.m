/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


#import "common.h"

@implementation Back

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCode: (int32_t) code text: (NSString *) text spare1: (NSString *) spare1 spare2: (NSString *) spare2
{
  self = [super init];
  __code = code;
  __code_isset = YES;
  __text = [text retain_stub];
  __text_isset = YES;
  __spare1 = [spare1 retain_stub];
  __spare1_isset = YES;
  __spare2 = [spare2 retain_stub];
  __spare2_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [decoder decodeInt32ForKey: @"code"];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"text"])
  {
    __text = [[decoder decodeObjectForKey: @"text"] retain_stub];
    __text_isset = YES;
  }
  if ([decoder containsValueForKey: @"spare1"])
  {
    __spare1 = [[decoder decodeObjectForKey: @"spare1"] retain_stub];
    __spare1_isset = YES;
  }
  if ([decoder containsValueForKey: @"spare2"])
  {
    __spare2 = [[decoder decodeObjectForKey: @"spare2"] retain_stub];
    __spare2_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__code_isset)
  {
    [encoder encodeInt32: __code forKey: @"code"];
  }
  if (__text_isset)
  {
    [encoder encodeObject: __text forKey: @"text"];
  }
  if (__spare1_isset)
  {
    [encoder encodeObject: __spare1 forKey: @"spare1"];
  }
  if (__spare2_isset)
  {
    [encoder encodeObject: __spare2 forKey: @"spare2"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __code_isset ? 2654435761 : 0;
  if (__code_isset)
  {
    hash = (hash * 31) ^ [@(__code) hash];
  }
  hash = (hash * 31) ^ __text_isset ? 2654435761 : 0;
  if (__text_isset)
  {
    hash = (hash * 31) ^ [__text hash];
  }
  hash = (hash * 31) ^ __spare1_isset ? 2654435761 : 0;
  if (__spare1_isset)
  {
    hash = (hash * 31) ^ [__spare1 hash];
  }
  hash = (hash * 31) ^ __spare2_isset ? 2654435761 : 0;
  if (__spare2_isset)
  {
    hash = (hash * 31) ^ [__spare2 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Back class]]) {
    return NO;
  }
  Back *other = (Back *)anObject;
  if ((__code_isset != other->__code_isset) ||
      (__code_isset && (__code != other->__code))) {
    return NO;
  }
  if ((__text_isset != other->__text_isset) ||
      (__text_isset && ((__text || other->__text) && ![__text isEqual:other->__text]))) {
    return NO;
  }
  if ((__spare1_isset != other->__spare1_isset) ||
      (__spare1_isset && ((__spare1 || other->__spare1) && ![__spare1 isEqual:other->__spare1]))) {
    return NO;
  }
  if ((__spare2_isset != other->__spare2_isset) ||
      (__spare2_isset && ((__spare2 || other->__spare2) && ![__spare2 isEqual:other->__spare2]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__text release_stub];
  [__spare1 release_stub];
  [__spare2 release_stub];
  [super dealloc_stub];
}

- (int32_t) code {
  return __code;
}

- (void) setCode: (int32_t) code {
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  __code_isset = NO;
}

- (NSString *) text {
  return [[__text retain_stub] autorelease_stub];
}

- (void) setText: (NSString *) text {
  [text retain_stub];
  [__text release_stub];
  __text = text;
  __text_isset = YES;
}

- (BOOL) textIsSet {
  return __text_isset;
}

- (void) unsetText {
  [__text release_stub];
  __text = nil;
  __text_isset = NO;
}

- (NSString *) spare1 {
  return [[__spare1 retain_stub] autorelease_stub];
}

- (void) setSpare1: (NSString *) spare1 {
  [spare1 retain_stub];
  [__spare1 release_stub];
  __spare1 = spare1;
  __spare1_isset = YES;
}

- (BOOL) spare1IsSet {
  return __spare1_isset;
}

- (void) unsetSpare1 {
  [__spare1 release_stub];
  __spare1 = nil;
  __spare1_isset = NO;
}

- (NSString *) spare2 {
  return [[__spare2 retain_stub] autorelease_stub];
}

- (void) setSpare2: (NSString *) spare2 {
  [spare2 retain_stub];
  [__spare2 release_stub];
  __spare2 = spare2;
  __spare2_isset = YES;
}

- (BOOL) spare2IsSet {
  return __spare2_isset;
}

- (void) unsetSpare2 {
  [__spare2 release_stub];
  __spare2 = nil;
  __spare2_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSpare1: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSpare2: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Back"];
  if (__code_isset) {
    [outProtocol writeFieldBeginWithName: @"code" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __code];
    [outProtocol writeFieldEnd];
  }
  if (__text_isset) {
    if (__text != nil) {
      [outProtocol writeFieldBeginWithName: @"text" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __text];
      [outProtocol writeFieldEnd];
    }
  }
  if (__spare1_isset) {
    if (__spare1 != nil) {
      [outProtocol writeFieldBeginWithName: @"spare1" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __spare1];
      [outProtocol writeFieldEnd];
    }
  }
  if (__spare2_isset) {
    if (__spare2 != nil) {
      [outProtocol writeFieldBeginWithName: @"spare2" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __spare2];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Back("];
  [ms appendString: @"code:"];
  [ms appendFormat: @"%i", __code];
  [ms appendString: @",text:"];
  [ms appendFormat: @"\"%@\"", __text];
  [ms appendString: @",spare1:"];
  [ms appendFormat: @"\"%@\"", __spare1];
  [ms appendString: @",spare2:"];
  [ms appendFormat: @"\"%@\"", __spare2];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Page

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPageSize: (NSString *) pageSize recordStart: (NSString *) recordStart sortName: (NSString *) sortName sortType: (NSString *) sortType
{
  self = [super init];
  __pageSize = [pageSize retain_stub];
  __pageSize_isset = YES;
  __recordStart = [recordStart retain_stub];
  __recordStart_isset = YES;
  __sortName = [sortName retain_stub];
  __sortName_isset = YES;
  __sortType = [sortType retain_stub];
  __sortType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pageSize"])
  {
    __pageSize = [[decoder decodeObjectForKey: @"pageSize"] retain_stub];
    __pageSize_isset = YES;
  }
  if ([decoder containsValueForKey: @"recordStart"])
  {
    __recordStart = [[decoder decodeObjectForKey: @"recordStart"] retain_stub];
    __recordStart_isset = YES;
  }
  if ([decoder containsValueForKey: @"sortName"])
  {
    __sortName = [[decoder decodeObjectForKey: @"sortName"] retain_stub];
    __sortName_isset = YES;
  }
  if ([decoder containsValueForKey: @"sortType"])
  {
    __sortType = [[decoder decodeObjectForKey: @"sortType"] retain_stub];
    __sortType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pageSize_isset)
  {
    [encoder encodeObject: __pageSize forKey: @"pageSize"];
  }
  if (__recordStart_isset)
  {
    [encoder encodeObject: __recordStart forKey: @"recordStart"];
  }
  if (__sortName_isset)
  {
    [encoder encodeObject: __sortName forKey: @"sortName"];
  }
  if (__sortType_isset)
  {
    [encoder encodeObject: __sortType forKey: @"sortType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __pageSize_isset ? 2654435761 : 0;
  if (__pageSize_isset)
  {
    hash = (hash * 31) ^ [__pageSize hash];
  }
  hash = (hash * 31) ^ __recordStart_isset ? 2654435761 : 0;
  if (__recordStart_isset)
  {
    hash = (hash * 31) ^ [__recordStart hash];
  }
  hash = (hash * 31) ^ __sortName_isset ? 2654435761 : 0;
  if (__sortName_isset)
  {
    hash = (hash * 31) ^ [__sortName hash];
  }
  hash = (hash * 31) ^ __sortType_isset ? 2654435761 : 0;
  if (__sortType_isset)
  {
    hash = (hash * 31) ^ [__sortType hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Page class]]) {
    return NO;
  }
  Page *other = (Page *)anObject;
  if ((__pageSize_isset != other->__pageSize_isset) ||
      (__pageSize_isset && ((__pageSize || other->__pageSize) && ![__pageSize isEqual:other->__pageSize]))) {
    return NO;
  }
  if ((__recordStart_isset != other->__recordStart_isset) ||
      (__recordStart_isset && ((__recordStart || other->__recordStart) && ![__recordStart isEqual:other->__recordStart]))) {
    return NO;
  }
  if ((__sortName_isset != other->__sortName_isset) ||
      (__sortName_isset && ((__sortName || other->__sortName) && ![__sortName isEqual:other->__sortName]))) {
    return NO;
  }
  if ((__sortType_isset != other->__sortType_isset) ||
      (__sortType_isset && ((__sortType || other->__sortType) && ![__sortType isEqual:other->__sortType]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__pageSize release_stub];
  [__recordStart release_stub];
  [__sortName release_stub];
  [__sortType release_stub];
  [super dealloc_stub];
}

- (NSString *) pageSize {
  return [[__pageSize retain_stub] autorelease_stub];
}

- (void) setPageSize: (NSString *) pageSize {
  [pageSize retain_stub];
  [__pageSize release_stub];
  __pageSize = pageSize;
  __pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
  return __pageSize_isset;
}

- (void) unsetPageSize {
  [__pageSize release_stub];
  __pageSize = nil;
  __pageSize_isset = NO;
}

- (NSString *) recordStart {
  return [[__recordStart retain_stub] autorelease_stub];
}

- (void) setRecordStart: (NSString *) recordStart {
  [recordStart retain_stub];
  [__recordStart release_stub];
  __recordStart = recordStart;
  __recordStart_isset = YES;
}

- (BOOL) recordStartIsSet {
  return __recordStart_isset;
}

- (void) unsetRecordStart {
  [__recordStart release_stub];
  __recordStart = nil;
  __recordStart_isset = NO;
}

- (NSString *) sortName {
  return [[__sortName retain_stub] autorelease_stub];
}

- (void) setSortName: (NSString *) sortName {
  [sortName retain_stub];
  [__sortName release_stub];
  __sortName = sortName;
  __sortName_isset = YES;
}

- (BOOL) sortNameIsSet {
  return __sortName_isset;
}

- (void) unsetSortName {
  [__sortName release_stub];
  __sortName = nil;
  __sortName_isset = NO;
}

- (NSString *) sortType {
  return [[__sortType retain_stub] autorelease_stub];
}

- (void) setSortType: (NSString *) sortType {
  [sortType retain_stub];
  [__sortType release_stub];
  __sortType = sortType;
  __sortType_isset = YES;
}

- (BOOL) sortTypeIsSet {
  return __sortType_isset;
}

- (void) unsetSortType {
  [__sortType release_stub];
  __sortType = nil;
  __sortType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPageSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecordStart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSortName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSortType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Page"];
  if (__pageSize_isset) {
    if (__pageSize != nil) {
      [outProtocol writeFieldBeginWithName: @"pageSize" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __pageSize];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recordStart_isset) {
    if (__recordStart != nil) {
      [outProtocol writeFieldBeginWithName: @"recordStart" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __recordStart];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sortName_isset) {
    if (__sortName != nil) {
      [outProtocol writeFieldBeginWithName: @"sortName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __sortName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sortType_isset) {
    if (__sortType != nil) {
      [outProtocol writeFieldBeginWithName: @"sortType" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __sortType];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Page("];
  [ms appendString: @"pageSize:"];
  [ms appendFormat: @"\"%@\"", __pageSize];
  [ms appendString: @",recordStart:"];
  [ms appendFormat: @"\"%@\"", __recordStart];
  [ms appendString: @",sortName:"];
  [ms appendFormat: @"\"%@\"", __sortName];
  [ms appendString: @",sortType:"];
  [ms appendFormat: @"\"%@\"", __sortType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation commonConstants
+ (void) initialize {
}
@end

