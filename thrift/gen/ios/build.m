/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "common.h"
#import "auth.h"

#import "build.h"

@implementation Build

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id name: (NSString *) name type: (NSString *) type sort: (NSString *) sort district_id: (int32_t) district_id district_name: (NSString *) district_name address: (NSString *) address x: (NSString *) x y: (NSString *) y url: (NSString *) url desc: (NSString *) desc state: (NSString *) state op: (NSString *) op op_time: (NSString *) op_time back: (Back *) back
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __type = [type retain_stub];
  __type_isset = YES;
  __sort = [sort retain_stub];
  __sort_isset = YES;
  __district_id = district_id;
  __district_id_isset = YES;
  __district_name = [district_name retain_stub];
  __district_name_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __x = [x retain_stub];
  __x_isset = YES;
  __y = [y retain_stub];
  __y_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __state = [state retain_stub];
  __state_isset = YES;
  __op = [op retain_stub];
  __op_isset = YES;
  __op_time = [op_time retain_stub];
  __op_time_isset = YES;
  __back = [back retain_stub];
  __back_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"sort"])
  {
    __sort = [[decoder decodeObjectForKey: @"sort"] retain_stub];
    __sort_isset = YES;
  }
  if ([decoder containsValueForKey: @"district_id"])
  {
    __district_id = [decoder decodeInt32ForKey: @"district_id"];
    __district_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"district_name"])
  {
    __district_name = [[decoder decodeObjectForKey: @"district_name"] retain_stub];
    __district_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"x"])
  {
    __x = [[decoder decodeObjectForKey: @"x"] retain_stub];
    __x_isset = YES;
  }
  if ([decoder containsValueForKey: @"y"])
  {
    __y = [[decoder decodeObjectForKey: @"y"] retain_stub];
    __y_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [[decoder decodeObjectForKey: @"state"] retain_stub];
    __state_isset = YES;
  }
  if ([decoder containsValueForKey: @"op"])
  {
    __op = [[decoder decodeObjectForKey: @"op"] retain_stub];
    __op_isset = YES;
  }
  if ([decoder containsValueForKey: @"op_time"])
  {
    __op_time = [[decoder decodeObjectForKey: @"op_time"] retain_stub];
    __op_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"back"])
  {
    __back = [[decoder decodeObjectForKey: @"back"] retain_stub];
    __back_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__sort_isset)
  {
    [encoder encodeObject: __sort forKey: @"sort"];
  }
  if (__district_id_isset)
  {
    [encoder encodeInt32: __district_id forKey: @"district_id"];
  }
  if (__district_name_isset)
  {
    [encoder encodeObject: __district_name forKey: @"district_name"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__x_isset)
  {
    [encoder encodeObject: __x forKey: @"x"];
  }
  if (__y_isset)
  {
    [encoder encodeObject: __y forKey: @"y"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__state_isset)
  {
    [encoder encodeObject: __state forKey: @"state"];
  }
  if (__op_isset)
  {
    [encoder encodeObject: __op forKey: @"op"];
  }
  if (__op_time_isset)
  {
    [encoder encodeObject: __op_time forKey: @"op_time"];
  }
  if (__back_isset)
  {
    [encoder encodeObject: __back forKey: @"back"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [__type hash];
  }
  hash = (hash * 31) ^ __sort_isset ? 2654435761 : 0;
  if (__sort_isset)
  {
    hash = (hash * 31) ^ [__sort hash];
  }
  hash = (hash * 31) ^ __district_id_isset ? 2654435761 : 0;
  if (__district_id_isset)
  {
    hash = (hash * 31) ^ [@(__district_id) hash];
  }
  hash = (hash * 31) ^ __district_name_isset ? 2654435761 : 0;
  if (__district_name_isset)
  {
    hash = (hash * 31) ^ [__district_name hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __x_isset ? 2654435761 : 0;
  if (__x_isset)
  {
    hash = (hash * 31) ^ [__x hash];
  }
  hash = (hash * 31) ^ __y_isset ? 2654435761 : 0;
  if (__y_isset)
  {
    hash = (hash * 31) ^ [__y hash];
  }
  hash = (hash * 31) ^ __url_isset ? 2654435761 : 0;
  if (__url_isset)
  {
    hash = (hash * 31) ^ [__url hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __state_isset ? 2654435761 : 0;
  if (__state_isset)
  {
    hash = (hash * 31) ^ [__state hash];
  }
  hash = (hash * 31) ^ __op_isset ? 2654435761 : 0;
  if (__op_isset)
  {
    hash = (hash * 31) ^ [__op hash];
  }
  hash = (hash * 31) ^ __op_time_isset ? 2654435761 : 0;
  if (__op_time_isset)
  {
    hash = (hash * 31) ^ [__op_time hash];
  }
  hash = (hash * 31) ^ __back_isset ? 2654435761 : 0;
  if (__back_isset)
  {
    hash = (hash * 31) ^ [__back hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Build class]]) {
    return NO;
  }
  Build *other = (Build *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && ((__type || other->__type) && ![__type isEqual:other->__type]))) {
    return NO;
  }
  if ((__sort_isset != other->__sort_isset) ||
      (__sort_isset && ((__sort || other->__sort) && ![__sort isEqual:other->__sort]))) {
    return NO;
  }
  if ((__district_id_isset != other->__district_id_isset) ||
      (__district_id_isset && (__district_id != other->__district_id))) {
    return NO;
  }
  if ((__district_name_isset != other->__district_name_isset) ||
      (__district_name_isset && ((__district_name || other->__district_name) && ![__district_name isEqual:other->__district_name]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__x_isset != other->__x_isset) ||
      (__x_isset && ((__x || other->__x) && ![__x isEqual:other->__x]))) {
    return NO;
  }
  if ((__y_isset != other->__y_isset) ||
      (__y_isset && ((__y || other->__y) && ![__y isEqual:other->__y]))) {
    return NO;
  }
  if ((__url_isset != other->__url_isset) ||
      (__url_isset && ((__url || other->__url) && ![__url isEqual:other->__url]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__state_isset != other->__state_isset) ||
      (__state_isset && ((__state || other->__state) && ![__state isEqual:other->__state]))) {
    return NO;
  }
  if ((__op_isset != other->__op_isset) ||
      (__op_isset && ((__op || other->__op) && ![__op isEqual:other->__op]))) {
    return NO;
  }
  if ((__op_time_isset != other->__op_time_isset) ||
      (__op_time_isset && ((__op_time || other->__op_time) && ![__op_time isEqual:other->__op_time]))) {
    return NO;
  }
  if ((__back_isset != other->__back_isset) ||
      (__back_isset && ((__back || other->__back) && ![__back isEqual:other->__back]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__name release_stub];
  [__type release_stub];
  [__sort release_stub];
  [__district_name release_stub];
  [__address release_stub];
  [__x release_stub];
  [__y release_stub];
  [__url release_stub];
  [__desc release_stub];
  [__state release_stub];
  [__op release_stub];
  [__op_time release_stub];
  [__back release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (NSString *) sort {
  return [[__sort retain_stub] autorelease_stub];
}

- (void) setSort: (NSString *) sort {
  [sort retain_stub];
  [__sort release_stub];
  __sort = sort;
  __sort_isset = YES;
}

- (BOOL) sortIsSet {
  return __sort_isset;
}

- (void) unsetSort {
  [__sort release_stub];
  __sort = nil;
  __sort_isset = NO;
}

- (int32_t) district_id {
  return __district_id;
}

- (void) setDistrict_id: (int32_t) district_id {
  __district_id = district_id;
  __district_id_isset = YES;
}

- (BOOL) district_idIsSet {
  return __district_id_isset;
}

- (void) unsetDistrict_id {
  __district_id_isset = NO;
}

- (NSString *) district_name {
  return [[__district_name retain_stub] autorelease_stub];
}

- (void) setDistrict_name: (NSString *) district_name {
  [district_name retain_stub];
  [__district_name release_stub];
  __district_name = district_name;
  __district_name_isset = YES;
}

- (BOOL) district_nameIsSet {
  return __district_name_isset;
}

- (void) unsetDistrict_name {
  [__district_name release_stub];
  __district_name = nil;
  __district_name_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) x {
  return [[__x retain_stub] autorelease_stub];
}

- (void) setX: (NSString *) x {
  [x retain_stub];
  [__x release_stub];
  __x = x;
  __x_isset = YES;
}

- (BOOL) xIsSet {
  return __x_isset;
}

- (void) unsetX {
  [__x release_stub];
  __x = nil;
  __x_isset = NO;
}

- (NSString *) y {
  return [[__y retain_stub] autorelease_stub];
}

- (void) setY: (NSString *) y {
  [y retain_stub];
  [__y release_stub];
  __y = y;
  __y_isset = YES;
}

- (BOOL) yIsSet {
  return __y_isset;
}

- (void) unsetY {
  [__y release_stub];
  __y = nil;
  __y_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) state {
  return [[__state retain_stub] autorelease_stub];
}

- (void) setState: (NSString *) state {
  [state retain_stub];
  [__state release_stub];
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  [__state release_stub];
  __state = nil;
  __state_isset = NO;
}

- (NSString *) op {
  return [[__op retain_stub] autorelease_stub];
}

- (void) setOp: (NSString *) op {
  [op retain_stub];
  [__op release_stub];
  __op = op;
  __op_isset = YES;
}

- (BOOL) opIsSet {
  return __op_isset;
}

- (void) unsetOp {
  [__op release_stub];
  __op = nil;
  __op_isset = NO;
}

- (NSString *) op_time {
  return [[__op_time retain_stub] autorelease_stub];
}

- (void) setOp_time: (NSString *) op_time {
  [op_time retain_stub];
  [__op_time release_stub];
  __op_time = op_time;
  __op_time_isset = YES;
}

- (BOOL) op_timeIsSet {
  return __op_time_isset;
}

- (void) unsetOp_time {
  [__op_time release_stub];
  __op_time = nil;
  __op_time_isset = NO;
}

- (Back *) back {
  return [[__back retain_stub] autorelease_stub];
}

- (void) setBack: (Back *) back {
  [back retain_stub];
  [__back release_stub];
  __back = back;
  __back_isset = YES;
}

- (BOOL) backIsSet {
  return __back_isset;
}

- (void) unsetBack {
  [__back release_stub];
  __back = nil;
  __back_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSort: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDistrict_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDistrict_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setX: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setY: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOp_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRUCT) {
          Back *fieldValue = [[Back alloc] init];
          [fieldValue read: inProtocol];
          [self setBack: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Build"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sort_isset) {
    if (__sort != nil) {
      [outProtocol writeFieldBeginWithName: @"sort" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __sort];
      [outProtocol writeFieldEnd];
    }
  }
  if (__district_id_isset) {
    [outProtocol writeFieldBeginWithName: @"district_id" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __district_id];
    [outProtocol writeFieldEnd];
  }
  if (__district_name_isset) {
    if (__district_name != nil) {
      [outProtocol writeFieldBeginWithName: @"district_name" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __district_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__x_isset) {
    if (__x != nil) {
      [outProtocol writeFieldBeginWithName: @"x" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __x];
      [outProtocol writeFieldEnd];
    }
  }
  if (__y_isset) {
    if (__y != nil) {
      [outProtocol writeFieldBeginWithName: @"y" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __y];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__state_isset) {
    if (__state != nil) {
      [outProtocol writeFieldBeginWithName: @"state" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __state];
      [outProtocol writeFieldEnd];
    }
  }
  if (__op_isset) {
    if (__op != nil) {
      [outProtocol writeFieldBeginWithName: @"op" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __op];
      [outProtocol writeFieldEnd];
    }
  }
  if (__op_time_isset) {
    if (__op_time != nil) {
      [outProtocol writeFieldBeginWithName: @"op_time" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __op_time];
      [outProtocol writeFieldEnd];
    }
  }
  if (__back_isset) {
    if (__back != nil) {
      [outProtocol writeFieldBeginWithName: @"back" type: TType_STRUCT fieldID: 15];
      [__back write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Build("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",sort:"];
  [ms appendFormat: @"\"%@\"", __sort];
  [ms appendString: @",district_id:"];
  [ms appendFormat: @"%i", __district_id];
  [ms appendString: @",district_name:"];
  [ms appendFormat: @"\"%@\"", __district_name];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",x:"];
  [ms appendFormat: @"\"%@\"", __x];
  [ms appendString: @",y:"];
  [ms appendFormat: @"\"%@\"", __y];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",state:"];
  [ms appendFormat: @"\"%@\"", __state];
  [ms appendString: @",op:"];
  [ms appendFormat: @"\"%@\"", __op];
  [ms appendString: @",op_time:"];
  [ms appendFormat: @"\"%@\"", __op_time];
  [ms appendString: @",back:"];
  [ms appendFormat: @"%@", __back];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BuildDetail

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id main_id: (NSString *) main_id name: (NSString *) name desc: (NSString *) desc url1: (NSString *) url1 url2: (NSString *) url2 url3: (NSString *) url3 url4: (NSString *) url4 url5: (NSString *) url5 url6: (NSString *) url6
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __main_id = [main_id retain_stub];
  __main_id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __url1 = [url1 retain_stub];
  __url1_isset = YES;
  __url2 = [url2 retain_stub];
  __url2_isset = YES;
  __url3 = [url3 retain_stub];
  __url3_isset = YES;
  __url4 = [url4 retain_stub];
  __url4_isset = YES;
  __url5 = [url5 retain_stub];
  __url5_isset = YES;
  __url6 = [url6 retain_stub];
  __url6_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"main_id"])
  {
    __main_id = [[decoder decodeObjectForKey: @"main_id"] retain_stub];
    __main_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"url1"])
  {
    __url1 = [[decoder decodeObjectForKey: @"url1"] retain_stub];
    __url1_isset = YES;
  }
  if ([decoder containsValueForKey: @"url2"])
  {
    __url2 = [[decoder decodeObjectForKey: @"url2"] retain_stub];
    __url2_isset = YES;
  }
  if ([decoder containsValueForKey: @"url3"])
  {
    __url3 = [[decoder decodeObjectForKey: @"url3"] retain_stub];
    __url3_isset = YES;
  }
  if ([decoder containsValueForKey: @"url4"])
  {
    __url4 = [[decoder decodeObjectForKey: @"url4"] retain_stub];
    __url4_isset = YES;
  }
  if ([decoder containsValueForKey: @"url5"])
  {
    __url5 = [[decoder decodeObjectForKey: @"url5"] retain_stub];
    __url5_isset = YES;
  }
  if ([decoder containsValueForKey: @"url6"])
  {
    __url6 = [[decoder decodeObjectForKey: @"url6"] retain_stub];
    __url6_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__main_id_isset)
  {
    [encoder encodeObject: __main_id forKey: @"main_id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__url1_isset)
  {
    [encoder encodeObject: __url1 forKey: @"url1"];
  }
  if (__url2_isset)
  {
    [encoder encodeObject: __url2 forKey: @"url2"];
  }
  if (__url3_isset)
  {
    [encoder encodeObject: __url3 forKey: @"url3"];
  }
  if (__url4_isset)
  {
    [encoder encodeObject: __url4 forKey: @"url4"];
  }
  if (__url5_isset)
  {
    [encoder encodeObject: __url5 forKey: @"url5"];
  }
  if (__url6_isset)
  {
    [encoder encodeObject: __url6 forKey: @"url6"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __main_id_isset ? 2654435761 : 0;
  if (__main_id_isset)
  {
    hash = (hash * 31) ^ [__main_id hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __url1_isset ? 2654435761 : 0;
  if (__url1_isset)
  {
    hash = (hash * 31) ^ [__url1 hash];
  }
  hash = (hash * 31) ^ __url2_isset ? 2654435761 : 0;
  if (__url2_isset)
  {
    hash = (hash * 31) ^ [__url2 hash];
  }
  hash = (hash * 31) ^ __url3_isset ? 2654435761 : 0;
  if (__url3_isset)
  {
    hash = (hash * 31) ^ [__url3 hash];
  }
  hash = (hash * 31) ^ __url4_isset ? 2654435761 : 0;
  if (__url4_isset)
  {
    hash = (hash * 31) ^ [__url4 hash];
  }
  hash = (hash * 31) ^ __url5_isset ? 2654435761 : 0;
  if (__url5_isset)
  {
    hash = (hash * 31) ^ [__url5 hash];
  }
  hash = (hash * 31) ^ __url6_isset ? 2654435761 : 0;
  if (__url6_isset)
  {
    hash = (hash * 31) ^ [__url6 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BuildDetail class]]) {
    return NO;
  }
  BuildDetail *other = (BuildDetail *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__main_id_isset != other->__main_id_isset) ||
      (__main_id_isset && ((__main_id || other->__main_id) && ![__main_id isEqual:other->__main_id]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__url1_isset != other->__url1_isset) ||
      (__url1_isset && ((__url1 || other->__url1) && ![__url1 isEqual:other->__url1]))) {
    return NO;
  }
  if ((__url2_isset != other->__url2_isset) ||
      (__url2_isset && ((__url2 || other->__url2) && ![__url2 isEqual:other->__url2]))) {
    return NO;
  }
  if ((__url3_isset != other->__url3_isset) ||
      (__url3_isset && ((__url3 || other->__url3) && ![__url3 isEqual:other->__url3]))) {
    return NO;
  }
  if ((__url4_isset != other->__url4_isset) ||
      (__url4_isset && ((__url4 || other->__url4) && ![__url4 isEqual:other->__url4]))) {
    return NO;
  }
  if ((__url5_isset != other->__url5_isset) ||
      (__url5_isset && ((__url5 || other->__url5) && ![__url5 isEqual:other->__url5]))) {
    return NO;
  }
  if ((__url6_isset != other->__url6_isset) ||
      (__url6_isset && ((__url6 || other->__url6) && ![__url6 isEqual:other->__url6]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__main_id release_stub];
  [__name release_stub];
  [__desc release_stub];
  [__url1 release_stub];
  [__url2 release_stub];
  [__url3 release_stub];
  [__url4 release_stub];
  [__url5 release_stub];
  [__url6 release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) main_id {
  return [[__main_id retain_stub] autorelease_stub];
}

- (void) setMain_id: (NSString *) main_id {
  [main_id retain_stub];
  [__main_id release_stub];
  __main_id = main_id;
  __main_id_isset = YES;
}

- (BOOL) main_idIsSet {
  return __main_id_isset;
}

- (void) unsetMain_id {
  [__main_id release_stub];
  __main_id = nil;
  __main_id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) url1 {
  return [[__url1 retain_stub] autorelease_stub];
}

- (void) setUrl1: (NSString *) url1 {
  [url1 retain_stub];
  [__url1 release_stub];
  __url1 = url1;
  __url1_isset = YES;
}

- (BOOL) url1IsSet {
  return __url1_isset;
}

- (void) unsetUrl1 {
  [__url1 release_stub];
  __url1 = nil;
  __url1_isset = NO;
}

- (NSString *) url2 {
  return [[__url2 retain_stub] autorelease_stub];
}

- (void) setUrl2: (NSString *) url2 {
  [url2 retain_stub];
  [__url2 release_stub];
  __url2 = url2;
  __url2_isset = YES;
}

- (BOOL) url2IsSet {
  return __url2_isset;
}

- (void) unsetUrl2 {
  [__url2 release_stub];
  __url2 = nil;
  __url2_isset = NO;
}

- (NSString *) url3 {
  return [[__url3 retain_stub] autorelease_stub];
}

- (void) setUrl3: (NSString *) url3 {
  [url3 retain_stub];
  [__url3 release_stub];
  __url3 = url3;
  __url3_isset = YES;
}

- (BOOL) url3IsSet {
  return __url3_isset;
}

- (void) unsetUrl3 {
  [__url3 release_stub];
  __url3 = nil;
  __url3_isset = NO;
}

- (NSString *) url4 {
  return [[__url4 retain_stub] autorelease_stub];
}

- (void) setUrl4: (NSString *) url4 {
  [url4 retain_stub];
  [__url4 release_stub];
  __url4 = url4;
  __url4_isset = YES;
}

- (BOOL) url4IsSet {
  return __url4_isset;
}

- (void) unsetUrl4 {
  [__url4 release_stub];
  __url4 = nil;
  __url4_isset = NO;
}

- (NSString *) url5 {
  return [[__url5 retain_stub] autorelease_stub];
}

- (void) setUrl5: (NSString *) url5 {
  [url5 retain_stub];
  [__url5 release_stub];
  __url5 = url5;
  __url5_isset = YES;
}

- (BOOL) url5IsSet {
  return __url5_isset;
}

- (void) unsetUrl5 {
  [__url5 release_stub];
  __url5 = nil;
  __url5_isset = NO;
}

- (NSString *) url6 {
  return [[__url6 retain_stub] autorelease_stub];
}

- (void) setUrl6: (NSString *) url6 {
  [url6 retain_stub];
  [__url6 release_stub];
  __url6 = url6;
  __url6_isset = YES;
}

- (BOOL) url6IsSet {
  return __url6_isset;
}

- (void) unsetUrl6 {
  [__url6 release_stub];
  __url6 = nil;
  __url6_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMain_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl1: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl2: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl3: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl4: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl5: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl6: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BuildDetail"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__main_id_isset) {
    if (__main_id != nil) {
      [outProtocol writeFieldBeginWithName: @"main_id" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __main_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url1_isset) {
    if (__url1 != nil) {
      [outProtocol writeFieldBeginWithName: @"url1" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __url1];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url2_isset) {
    if (__url2 != nil) {
      [outProtocol writeFieldBeginWithName: @"url2" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __url2];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url3_isset) {
    if (__url3 != nil) {
      [outProtocol writeFieldBeginWithName: @"url3" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __url3];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url4_isset) {
    if (__url4 != nil) {
      [outProtocol writeFieldBeginWithName: @"url4" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __url4];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url5_isset) {
    if (__url5 != nil) {
      [outProtocol writeFieldBeginWithName: @"url5" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __url5];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url6_isset) {
    if (__url6 != nil) {
      [outProtocol writeFieldBeginWithName: @"url6" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __url6];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BuildDetail("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",main_id:"];
  [ms appendFormat: @"\"%@\"", __main_id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",url1:"];
  [ms appendFormat: @"\"%@\"", __url1];
  [ms appendString: @",url2:"];
  [ms appendFormat: @"\"%@\"", __url2];
  [ms appendString: @",url3:"];
  [ms appendFormat: @"\"%@\"", __url3];
  [ms appendString: @",url4:"];
  [ms appendFormat: @"\"%@\"", __url4];
  [ms appendString: @",url5:"];
  [ms appendFormat: @"\"%@\"", __url5];
  [ms appendString: @",url6:"];
  [ms appendFormat: @"\"%@\"", __url6];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Comment

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id main_id: (NSString *) main_id body: (NSString *) body level: (NSString *) level url1: (NSString *) url1 url2: (NSString *) url2 url3: (NSString *) url3 url4: (NSString *) url4 url5: (NSString *) url5 url6: (NSString *) url6 state: (NSString *) state type: (NSString *) type isused: (NSString *) isused back: (Back *) back
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __main_id = [main_id retain_stub];
  __main_id_isset = YES;
  __body = [body retain_stub];
  __body_isset = YES;
  __level = [level retain_stub];
  __level_isset = YES;
  __url1 = [url1 retain_stub];
  __url1_isset = YES;
  __url2 = [url2 retain_stub];
  __url2_isset = YES;
  __url3 = [url3 retain_stub];
  __url3_isset = YES;
  __url4 = [url4 retain_stub];
  __url4_isset = YES;
  __url5 = [url5 retain_stub];
  __url5_isset = YES;
  __url6 = [url6 retain_stub];
  __url6_isset = YES;
  __state = [state retain_stub];
  __state_isset = YES;
  __type = [type retain_stub];
  __type_isset = YES;
  __isused = [isused retain_stub];
  __isused_isset = YES;
  __back = [back retain_stub];
  __back_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"main_id"])
  {
    __main_id = [[decoder decodeObjectForKey: @"main_id"] retain_stub];
    __main_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"body"])
  {
    __body = [[decoder decodeObjectForKey: @"body"] retain_stub];
    __body_isset = YES;
  }
  if ([decoder containsValueForKey: @"level"])
  {
    __level = [[decoder decodeObjectForKey: @"level"] retain_stub];
    __level_isset = YES;
  }
  if ([decoder containsValueForKey: @"url1"])
  {
    __url1 = [[decoder decodeObjectForKey: @"url1"] retain_stub];
    __url1_isset = YES;
  }
  if ([decoder containsValueForKey: @"url2"])
  {
    __url2 = [[decoder decodeObjectForKey: @"url2"] retain_stub];
    __url2_isset = YES;
  }
  if ([decoder containsValueForKey: @"url3"])
  {
    __url3 = [[decoder decodeObjectForKey: @"url3"] retain_stub];
    __url3_isset = YES;
  }
  if ([decoder containsValueForKey: @"url4"])
  {
    __url4 = [[decoder decodeObjectForKey: @"url4"] retain_stub];
    __url4_isset = YES;
  }
  if ([decoder containsValueForKey: @"url5"])
  {
    __url5 = [[decoder decodeObjectForKey: @"url5"] retain_stub];
    __url5_isset = YES;
  }
  if ([decoder containsValueForKey: @"url6"])
  {
    __url6 = [[decoder decodeObjectForKey: @"url6"] retain_stub];
    __url6_isset = YES;
  }
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [[decoder decodeObjectForKey: @"state"] retain_stub];
    __state_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"isused"])
  {
    __isused = [[decoder decodeObjectForKey: @"isused"] retain_stub];
    __isused_isset = YES;
  }
  if ([decoder containsValueForKey: @"back"])
  {
    __back = [[decoder decodeObjectForKey: @"back"] retain_stub];
    __back_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__main_id_isset)
  {
    [encoder encodeObject: __main_id forKey: @"main_id"];
  }
  if (__body_isset)
  {
    [encoder encodeObject: __body forKey: @"body"];
  }
  if (__level_isset)
  {
    [encoder encodeObject: __level forKey: @"level"];
  }
  if (__url1_isset)
  {
    [encoder encodeObject: __url1 forKey: @"url1"];
  }
  if (__url2_isset)
  {
    [encoder encodeObject: __url2 forKey: @"url2"];
  }
  if (__url3_isset)
  {
    [encoder encodeObject: __url3 forKey: @"url3"];
  }
  if (__url4_isset)
  {
    [encoder encodeObject: __url4 forKey: @"url4"];
  }
  if (__url5_isset)
  {
    [encoder encodeObject: __url5 forKey: @"url5"];
  }
  if (__url6_isset)
  {
    [encoder encodeObject: __url6 forKey: @"url6"];
  }
  if (__state_isset)
  {
    [encoder encodeObject: __state forKey: @"state"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__isused_isset)
  {
    [encoder encodeObject: __isused forKey: @"isused"];
  }
  if (__back_isset)
  {
    [encoder encodeObject: __back forKey: @"back"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __main_id_isset ? 2654435761 : 0;
  if (__main_id_isset)
  {
    hash = (hash * 31) ^ [__main_id hash];
  }
  hash = (hash * 31) ^ __body_isset ? 2654435761 : 0;
  if (__body_isset)
  {
    hash = (hash * 31) ^ [__body hash];
  }
  hash = (hash * 31) ^ __level_isset ? 2654435761 : 0;
  if (__level_isset)
  {
    hash = (hash * 31) ^ [__level hash];
  }
  hash = (hash * 31) ^ __url1_isset ? 2654435761 : 0;
  if (__url1_isset)
  {
    hash = (hash * 31) ^ [__url1 hash];
  }
  hash = (hash * 31) ^ __url2_isset ? 2654435761 : 0;
  if (__url2_isset)
  {
    hash = (hash * 31) ^ [__url2 hash];
  }
  hash = (hash * 31) ^ __url3_isset ? 2654435761 : 0;
  if (__url3_isset)
  {
    hash = (hash * 31) ^ [__url3 hash];
  }
  hash = (hash * 31) ^ __url4_isset ? 2654435761 : 0;
  if (__url4_isset)
  {
    hash = (hash * 31) ^ [__url4 hash];
  }
  hash = (hash * 31) ^ __url5_isset ? 2654435761 : 0;
  if (__url5_isset)
  {
    hash = (hash * 31) ^ [__url5 hash];
  }
  hash = (hash * 31) ^ __url6_isset ? 2654435761 : 0;
  if (__url6_isset)
  {
    hash = (hash * 31) ^ [__url6 hash];
  }
  hash = (hash * 31) ^ __state_isset ? 2654435761 : 0;
  if (__state_isset)
  {
    hash = (hash * 31) ^ [__state hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [__type hash];
  }
  hash = (hash * 31) ^ __isused_isset ? 2654435761 : 0;
  if (__isused_isset)
  {
    hash = (hash * 31) ^ [__isused hash];
  }
  hash = (hash * 31) ^ __back_isset ? 2654435761 : 0;
  if (__back_isset)
  {
    hash = (hash * 31) ^ [__back hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Comment class]]) {
    return NO;
  }
  Comment *other = (Comment *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__main_id_isset != other->__main_id_isset) ||
      (__main_id_isset && ((__main_id || other->__main_id) && ![__main_id isEqual:other->__main_id]))) {
    return NO;
  }
  if ((__body_isset != other->__body_isset) ||
      (__body_isset && ((__body || other->__body) && ![__body isEqual:other->__body]))) {
    return NO;
  }
  if ((__level_isset != other->__level_isset) ||
      (__level_isset && ((__level || other->__level) && ![__level isEqual:other->__level]))) {
    return NO;
  }
  if ((__url1_isset != other->__url1_isset) ||
      (__url1_isset && ((__url1 || other->__url1) && ![__url1 isEqual:other->__url1]))) {
    return NO;
  }
  if ((__url2_isset != other->__url2_isset) ||
      (__url2_isset && ((__url2 || other->__url2) && ![__url2 isEqual:other->__url2]))) {
    return NO;
  }
  if ((__url3_isset != other->__url3_isset) ||
      (__url3_isset && ((__url3 || other->__url3) && ![__url3 isEqual:other->__url3]))) {
    return NO;
  }
  if ((__url4_isset != other->__url4_isset) ||
      (__url4_isset && ((__url4 || other->__url4) && ![__url4 isEqual:other->__url4]))) {
    return NO;
  }
  if ((__url5_isset != other->__url5_isset) ||
      (__url5_isset && ((__url5 || other->__url5) && ![__url5 isEqual:other->__url5]))) {
    return NO;
  }
  if ((__url6_isset != other->__url6_isset) ||
      (__url6_isset && ((__url6 || other->__url6) && ![__url6 isEqual:other->__url6]))) {
    return NO;
  }
  if ((__state_isset != other->__state_isset) ||
      (__state_isset && ((__state || other->__state) && ![__state isEqual:other->__state]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && ((__type || other->__type) && ![__type isEqual:other->__type]))) {
    return NO;
  }
  if ((__isused_isset != other->__isused_isset) ||
      (__isused_isset && ((__isused || other->__isused) && ![__isused isEqual:other->__isused]))) {
    return NO;
  }
  if ((__back_isset != other->__back_isset) ||
      (__back_isset && ((__back || other->__back) && ![__back isEqual:other->__back]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__main_id release_stub];
  [__body release_stub];
  [__level release_stub];
  [__url1 release_stub];
  [__url2 release_stub];
  [__url3 release_stub];
  [__url4 release_stub];
  [__url5 release_stub];
  [__url6 release_stub];
  [__state release_stub];
  [__type release_stub];
  [__isused release_stub];
  [__back release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) main_id {
  return [[__main_id retain_stub] autorelease_stub];
}

- (void) setMain_id: (NSString *) main_id {
  [main_id retain_stub];
  [__main_id release_stub];
  __main_id = main_id;
  __main_id_isset = YES;
}

- (BOOL) main_idIsSet {
  return __main_id_isset;
}

- (void) unsetMain_id {
  [__main_id release_stub];
  __main_id = nil;
  __main_id_isset = NO;
}

- (NSString *) body {
  return [[__body retain_stub] autorelease_stub];
}

- (void) setBody: (NSString *) body {
  [body retain_stub];
  [__body release_stub];
  __body = body;
  __body_isset = YES;
}

- (BOOL) bodyIsSet {
  return __body_isset;
}

- (void) unsetBody {
  [__body release_stub];
  __body = nil;
  __body_isset = NO;
}

- (NSString *) level {
  return [[__level retain_stub] autorelease_stub];
}

- (void) setLevel: (NSString *) level {
  [level retain_stub];
  [__level release_stub];
  __level = level;
  __level_isset = YES;
}

- (BOOL) levelIsSet {
  return __level_isset;
}

- (void) unsetLevel {
  [__level release_stub];
  __level = nil;
  __level_isset = NO;
}

- (NSString *) url1 {
  return [[__url1 retain_stub] autorelease_stub];
}

- (void) setUrl1: (NSString *) url1 {
  [url1 retain_stub];
  [__url1 release_stub];
  __url1 = url1;
  __url1_isset = YES;
}

- (BOOL) url1IsSet {
  return __url1_isset;
}

- (void) unsetUrl1 {
  [__url1 release_stub];
  __url1 = nil;
  __url1_isset = NO;
}

- (NSString *) url2 {
  return [[__url2 retain_stub] autorelease_stub];
}

- (void) setUrl2: (NSString *) url2 {
  [url2 retain_stub];
  [__url2 release_stub];
  __url2 = url2;
  __url2_isset = YES;
}

- (BOOL) url2IsSet {
  return __url2_isset;
}

- (void) unsetUrl2 {
  [__url2 release_stub];
  __url2 = nil;
  __url2_isset = NO;
}

- (NSString *) url3 {
  return [[__url3 retain_stub] autorelease_stub];
}

- (void) setUrl3: (NSString *) url3 {
  [url3 retain_stub];
  [__url3 release_stub];
  __url3 = url3;
  __url3_isset = YES;
}

- (BOOL) url3IsSet {
  return __url3_isset;
}

- (void) unsetUrl3 {
  [__url3 release_stub];
  __url3 = nil;
  __url3_isset = NO;
}

- (NSString *) url4 {
  return [[__url4 retain_stub] autorelease_stub];
}

- (void) setUrl4: (NSString *) url4 {
  [url4 retain_stub];
  [__url4 release_stub];
  __url4 = url4;
  __url4_isset = YES;
}

- (BOOL) url4IsSet {
  return __url4_isset;
}

- (void) unsetUrl4 {
  [__url4 release_stub];
  __url4 = nil;
  __url4_isset = NO;
}

- (NSString *) url5 {
  return [[__url5 retain_stub] autorelease_stub];
}

- (void) setUrl5: (NSString *) url5 {
  [url5 retain_stub];
  [__url5 release_stub];
  __url5 = url5;
  __url5_isset = YES;
}

- (BOOL) url5IsSet {
  return __url5_isset;
}

- (void) unsetUrl5 {
  [__url5 release_stub];
  __url5 = nil;
  __url5_isset = NO;
}

- (NSString *) url6 {
  return [[__url6 retain_stub] autorelease_stub];
}

- (void) setUrl6: (NSString *) url6 {
  [url6 retain_stub];
  [__url6 release_stub];
  __url6 = url6;
  __url6_isset = YES;
}

- (BOOL) url6IsSet {
  return __url6_isset;
}

- (void) unsetUrl6 {
  [__url6 release_stub];
  __url6 = nil;
  __url6_isset = NO;
}

- (NSString *) state {
  return [[__state retain_stub] autorelease_stub];
}

- (void) setState: (NSString *) state {
  [state retain_stub];
  [__state release_stub];
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  [__state release_stub];
  __state = nil;
  __state_isset = NO;
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (NSString *) isused {
  return [[__isused retain_stub] autorelease_stub];
}

- (void) setIsused: (NSString *) isused {
  [isused retain_stub];
  [__isused release_stub];
  __isused = isused;
  __isused_isset = YES;
}

- (BOOL) isusedIsSet {
  return __isused_isset;
}

- (void) unsetIsused {
  [__isused release_stub];
  __isused = nil;
  __isused_isset = NO;
}

- (Back *) back {
  return [[__back retain_stub] autorelease_stub];
}

- (void) setBack: (Back *) back {
  [back retain_stub];
  [__back release_stub];
  __back = back;
  __back_isset = YES;
}

- (BOOL) backIsSet {
  return __back_isset;
}

- (void) unsetBack {
  [__back release_stub];
  __back = nil;
  __back_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMain_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl1: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl2: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl3: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl4: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl5: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl6: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsused: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRUCT) {
          Back *fieldValue = [[Back alloc] init];
          [fieldValue read: inProtocol];
          [self setBack: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Comment"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__main_id_isset) {
    if (__main_id != nil) {
      [outProtocol writeFieldBeginWithName: @"main_id" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __main_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__body_isset) {
    if (__body != nil) {
      [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __body];
      [outProtocol writeFieldEnd];
    }
  }
  if (__level_isset) {
    if (__level != nil) {
      [outProtocol writeFieldBeginWithName: @"level" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __level];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url1_isset) {
    if (__url1 != nil) {
      [outProtocol writeFieldBeginWithName: @"url1" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __url1];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url2_isset) {
    if (__url2 != nil) {
      [outProtocol writeFieldBeginWithName: @"url2" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __url2];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url3_isset) {
    if (__url3 != nil) {
      [outProtocol writeFieldBeginWithName: @"url3" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __url3];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url4_isset) {
    if (__url4 != nil) {
      [outProtocol writeFieldBeginWithName: @"url4" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __url4];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url5_isset) {
    if (__url5 != nil) {
      [outProtocol writeFieldBeginWithName: @"url5" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __url5];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url6_isset) {
    if (__url6 != nil) {
      [outProtocol writeFieldBeginWithName: @"url6" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __url6];
      [outProtocol writeFieldEnd];
    }
  }
  if (__state_isset) {
    if (__state != nil) {
      [outProtocol writeFieldBeginWithName: @"state" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __state];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isused_isset) {
    if (__isused != nil) {
      [outProtocol writeFieldBeginWithName: @"isused" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __isused];
      [outProtocol writeFieldEnd];
    }
  }
  if (__back_isset) {
    if (__back != nil) {
      [outProtocol writeFieldBeginWithName: @"back" type: TType_STRUCT fieldID: 14];
      [__back write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Comment("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",main_id:"];
  [ms appendFormat: @"\"%@\"", __main_id];
  [ms appendString: @",body:"];
  [ms appendFormat: @"\"%@\"", __body];
  [ms appendString: @",level:"];
  [ms appendFormat: @"\"%@\"", __level];
  [ms appendString: @",url1:"];
  [ms appendFormat: @"\"%@\"", __url1];
  [ms appendString: @",url2:"];
  [ms appendFormat: @"\"%@\"", __url2];
  [ms appendString: @",url3:"];
  [ms appendFormat: @"\"%@\"", __url3];
  [ms appendString: @",url4:"];
  [ms appendFormat: @"\"%@\"", __url4];
  [ms appendString: @",url5:"];
  [ms appendFormat: @"\"%@\"", __url5];
  [ms appendString: @",url6:"];
  [ms appendFormat: @"\"%@\"", __url6];
  [ms appendString: @",state:"];
  [ms appendFormat: @"\"%@\"", __state];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",isused:"];
  [ms appendFormat: @"\"%@\"", __isused];
  [ms appendString: @",back:"];
  [ms appendFormat: @"%@", __back];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Notice

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id title: (NSString *) title type: (NSString *) type source: (NSString *) source public_time: (NSString *) public_time href_name: (NSString *) href_name href: (NSString *) href url: (NSString *) url start_t: (NSString *) start_t end_t: (NSString *) end_t address: (NSString *) address state: (NSString *) state back: (Back *) back
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __type = [type retain_stub];
  __type_isset = YES;
  __source = [source retain_stub];
  __source_isset = YES;
  __public_time = [public_time retain_stub];
  __public_time_isset = YES;
  __href_name = [href_name retain_stub];
  __href_name_isset = YES;
  __href = [href retain_stub];
  __href_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  __start_t = [start_t retain_stub];
  __start_t_isset = YES;
  __end_t = [end_t retain_stub];
  __end_t_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __state = [state retain_stub];
  __state_isset = YES;
  __back = [back retain_stub];
  __back_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"source"])
  {
    __source = [[decoder decodeObjectForKey: @"source"] retain_stub];
    __source_isset = YES;
  }
  if ([decoder containsValueForKey: @"public_time"])
  {
    __public_time = [[decoder decodeObjectForKey: @"public_time"] retain_stub];
    __public_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"href_name"])
  {
    __href_name = [[decoder decodeObjectForKey: @"href_name"] retain_stub];
    __href_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"href"])
  {
    __href = [[decoder decodeObjectForKey: @"href"] retain_stub];
    __href_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  if ([decoder containsValueForKey: @"start_t"])
  {
    __start_t = [[decoder decodeObjectForKey: @"start_t"] retain_stub];
    __start_t_isset = YES;
  }
  if ([decoder containsValueForKey: @"end_t"])
  {
    __end_t = [[decoder decodeObjectForKey: @"end_t"] retain_stub];
    __end_t_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [[decoder decodeObjectForKey: @"state"] retain_stub];
    __state_isset = YES;
  }
  if ([decoder containsValueForKey: @"back"])
  {
    __back = [[decoder decodeObjectForKey: @"back"] retain_stub];
    __back_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__source_isset)
  {
    [encoder encodeObject: __source forKey: @"source"];
  }
  if (__public_time_isset)
  {
    [encoder encodeObject: __public_time forKey: @"public_time"];
  }
  if (__href_name_isset)
  {
    [encoder encodeObject: __href_name forKey: @"href_name"];
  }
  if (__href_isset)
  {
    [encoder encodeObject: __href forKey: @"href"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
  if (__start_t_isset)
  {
    [encoder encodeObject: __start_t forKey: @"start_t"];
  }
  if (__end_t_isset)
  {
    [encoder encodeObject: __end_t forKey: @"end_t"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__state_isset)
  {
    [encoder encodeObject: __state forKey: @"state"];
  }
  if (__back_isset)
  {
    [encoder encodeObject: __back forKey: @"back"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __title_isset ? 2654435761 : 0;
  if (__title_isset)
  {
    hash = (hash * 31) ^ [__title hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [__type hash];
  }
  hash = (hash * 31) ^ __source_isset ? 2654435761 : 0;
  if (__source_isset)
  {
    hash = (hash * 31) ^ [__source hash];
  }
  hash = (hash * 31) ^ __public_time_isset ? 2654435761 : 0;
  if (__public_time_isset)
  {
    hash = (hash * 31) ^ [__public_time hash];
  }
  hash = (hash * 31) ^ __href_name_isset ? 2654435761 : 0;
  if (__href_name_isset)
  {
    hash = (hash * 31) ^ [__href_name hash];
  }
  hash = (hash * 31) ^ __href_isset ? 2654435761 : 0;
  if (__href_isset)
  {
    hash = (hash * 31) ^ [__href hash];
  }
  hash = (hash * 31) ^ __url_isset ? 2654435761 : 0;
  if (__url_isset)
  {
    hash = (hash * 31) ^ [__url hash];
  }
  hash = (hash * 31) ^ __start_t_isset ? 2654435761 : 0;
  if (__start_t_isset)
  {
    hash = (hash * 31) ^ [__start_t hash];
  }
  hash = (hash * 31) ^ __end_t_isset ? 2654435761 : 0;
  if (__end_t_isset)
  {
    hash = (hash * 31) ^ [__end_t hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __state_isset ? 2654435761 : 0;
  if (__state_isset)
  {
    hash = (hash * 31) ^ [__state hash];
  }
  hash = (hash * 31) ^ __back_isset ? 2654435761 : 0;
  if (__back_isset)
  {
    hash = (hash * 31) ^ [__back hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Notice class]]) {
    return NO;
  }
  Notice *other = (Notice *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__title_isset != other->__title_isset) ||
      (__title_isset && ((__title || other->__title) && ![__title isEqual:other->__title]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && ((__type || other->__type) && ![__type isEqual:other->__type]))) {
    return NO;
  }
  if ((__source_isset != other->__source_isset) ||
      (__source_isset && ((__source || other->__source) && ![__source isEqual:other->__source]))) {
    return NO;
  }
  if ((__public_time_isset != other->__public_time_isset) ||
      (__public_time_isset && ((__public_time || other->__public_time) && ![__public_time isEqual:other->__public_time]))) {
    return NO;
  }
  if ((__href_name_isset != other->__href_name_isset) ||
      (__href_name_isset && ((__href_name || other->__href_name) && ![__href_name isEqual:other->__href_name]))) {
    return NO;
  }
  if ((__href_isset != other->__href_isset) ||
      (__href_isset && ((__href || other->__href) && ![__href isEqual:other->__href]))) {
    return NO;
  }
  if ((__url_isset != other->__url_isset) ||
      (__url_isset && ((__url || other->__url) && ![__url isEqual:other->__url]))) {
    return NO;
  }
  if ((__start_t_isset != other->__start_t_isset) ||
      (__start_t_isset && ((__start_t || other->__start_t) && ![__start_t isEqual:other->__start_t]))) {
    return NO;
  }
  if ((__end_t_isset != other->__end_t_isset) ||
      (__end_t_isset && ((__end_t || other->__end_t) && ![__end_t isEqual:other->__end_t]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__state_isset != other->__state_isset) ||
      (__state_isset && ((__state || other->__state) && ![__state isEqual:other->__state]))) {
    return NO;
  }
  if ((__back_isset != other->__back_isset) ||
      (__back_isset && ((__back || other->__back) && ![__back isEqual:other->__back]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__title release_stub];
  [__type release_stub];
  [__source release_stub];
  [__public_time release_stub];
  [__href_name release_stub];
  [__href release_stub];
  [__url release_stub];
  [__start_t release_stub];
  [__end_t release_stub];
  [__address release_stub];
  [__state release_stub];
  [__back release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (NSString *) source {
  return [[__source retain_stub] autorelease_stub];
}

- (void) setSource: (NSString *) source {
  [source retain_stub];
  [__source release_stub];
  __source = source;
  __source_isset = YES;
}

- (BOOL) sourceIsSet {
  return __source_isset;
}

- (void) unsetSource {
  [__source release_stub];
  __source = nil;
  __source_isset = NO;
}

- (NSString *) public_time {
  return [[__public_time retain_stub] autorelease_stub];
}

- (void) setPublic_time: (NSString *) public_time {
  [public_time retain_stub];
  [__public_time release_stub];
  __public_time = public_time;
  __public_time_isset = YES;
}

- (BOOL) public_timeIsSet {
  return __public_time_isset;
}

- (void) unsetPublic_time {
  [__public_time release_stub];
  __public_time = nil;
  __public_time_isset = NO;
}

- (NSString *) href_name {
  return [[__href_name retain_stub] autorelease_stub];
}

- (void) setHref_name: (NSString *) href_name {
  [href_name retain_stub];
  [__href_name release_stub];
  __href_name = href_name;
  __href_name_isset = YES;
}

- (BOOL) href_nameIsSet {
  return __href_name_isset;
}

- (void) unsetHref_name {
  [__href_name release_stub];
  __href_name = nil;
  __href_name_isset = NO;
}

- (NSString *) href {
  return [[__href retain_stub] autorelease_stub];
}

- (void) setHref: (NSString *) href {
  [href retain_stub];
  [__href release_stub];
  __href = href;
  __href_isset = YES;
}

- (BOOL) hrefIsSet {
  return __href_isset;
}

- (void) unsetHref {
  [__href release_stub];
  __href = nil;
  __href_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (NSString *) start_t {
  return [[__start_t retain_stub] autorelease_stub];
}

- (void) setStart_t: (NSString *) start_t {
  [start_t retain_stub];
  [__start_t release_stub];
  __start_t = start_t;
  __start_t_isset = YES;
}

- (BOOL) start_tIsSet {
  return __start_t_isset;
}

- (void) unsetStart_t {
  [__start_t release_stub];
  __start_t = nil;
  __start_t_isset = NO;
}

- (NSString *) end_t {
  return [[__end_t retain_stub] autorelease_stub];
}

- (void) setEnd_t: (NSString *) end_t {
  [end_t retain_stub];
  [__end_t release_stub];
  __end_t = end_t;
  __end_t_isset = YES;
}

- (BOOL) end_tIsSet {
  return __end_t_isset;
}

- (void) unsetEnd_t {
  [__end_t release_stub];
  __end_t = nil;
  __end_t_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) state {
  return [[__state retain_stub] autorelease_stub];
}

- (void) setState: (NSString *) state {
  [state retain_stub];
  [__state release_stub];
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  [__state release_stub];
  __state = nil;
  __state_isset = NO;
}

- (Back *) back {
  return [[__back retain_stub] autorelease_stub];
}

- (void) setBack: (Back *) back {
  [back retain_stub];
  [__back release_stub];
  __back = back;
  __back_isset = YES;
}

- (BOOL) backIsSet {
  return __back_isset;
}

- (void) unsetBack {
  [__back release_stub];
  __back = nil;
  __back_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSource: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPublic_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHref_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHref: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStart_t: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEnd_t: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRUCT) {
          Back *fieldValue = [[Back alloc] init];
          [fieldValue read: inProtocol];
          [self setBack: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Notice"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__source_isset) {
    if (__source != nil) {
      [outProtocol writeFieldBeginWithName: @"source" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __source];
      [outProtocol writeFieldEnd];
    }
  }
  if (__public_time_isset) {
    if (__public_time != nil) {
      [outProtocol writeFieldBeginWithName: @"public_time" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __public_time];
      [outProtocol writeFieldEnd];
    }
  }
  if (__href_name_isset) {
    if (__href_name != nil) {
      [outProtocol writeFieldBeginWithName: @"href_name" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __href_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__href_isset) {
    if (__href != nil) {
      [outProtocol writeFieldBeginWithName: @"href" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __href];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__start_t_isset) {
    if (__start_t != nil) {
      [outProtocol writeFieldBeginWithName: @"start_t" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __start_t];
      [outProtocol writeFieldEnd];
    }
  }
  if (__end_t_isset) {
    if (__end_t != nil) {
      [outProtocol writeFieldBeginWithName: @"end_t" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __end_t];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__state_isset) {
    if (__state != nil) {
      [outProtocol writeFieldBeginWithName: @"state" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __state];
      [outProtocol writeFieldEnd];
    }
  }
  if (__back_isset) {
    if (__back != nil) {
      [outProtocol writeFieldBeginWithName: @"back" type: TType_STRUCT fieldID: 13];
      [__back write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Notice("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",source:"];
  [ms appendFormat: @"\"%@\"", __source];
  [ms appendString: @",public_time:"];
  [ms appendFormat: @"\"%@\"", __public_time];
  [ms appendString: @",href_name:"];
  [ms appendFormat: @"\"%@\"", __href_name];
  [ms appendString: @",href:"];
  [ms appendFormat: @"\"%@\"", __href];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",start_t:"];
  [ms appendFormat: @"\"%@\"", __start_t];
  [ms appendString: @",end_t:"];
  [ms appendFormat: @"\"%@\"", __end_t];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",state:"];
  [ms appendFormat: @"\"%@\"", __state];
  [ms appendString: @",back:"];
  [ms appendFormat: @"%@", __back];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NoticeDetail

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id main_id: (NSString *) main_id type: (NSString *) type body: (NSString *) body
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __main_id = [main_id retain_stub];
  __main_id_isset = YES;
  __type = [type retain_stub];
  __type_isset = YES;
  __body = [body retain_stub];
  __body_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"main_id"])
  {
    __main_id = [[decoder decodeObjectForKey: @"main_id"] retain_stub];
    __main_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"body"])
  {
    __body = [[decoder decodeObjectForKey: @"body"] retain_stub];
    __body_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__main_id_isset)
  {
    [encoder encodeObject: __main_id forKey: @"main_id"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__body_isset)
  {
    [encoder encodeObject: __body forKey: @"body"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __main_id_isset ? 2654435761 : 0;
  if (__main_id_isset)
  {
    hash = (hash * 31) ^ [__main_id hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [__type hash];
  }
  hash = (hash * 31) ^ __body_isset ? 2654435761 : 0;
  if (__body_isset)
  {
    hash = (hash * 31) ^ [__body hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NoticeDetail class]]) {
    return NO;
  }
  NoticeDetail *other = (NoticeDetail *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__main_id_isset != other->__main_id_isset) ||
      (__main_id_isset && ((__main_id || other->__main_id) && ![__main_id isEqual:other->__main_id]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && ((__type || other->__type) && ![__type isEqual:other->__type]))) {
    return NO;
  }
  if ((__body_isset != other->__body_isset) ||
      (__body_isset && ((__body || other->__body) && ![__body isEqual:other->__body]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__main_id release_stub];
  [__type release_stub];
  [__body release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) main_id {
  return [[__main_id retain_stub] autorelease_stub];
}

- (void) setMain_id: (NSString *) main_id {
  [main_id retain_stub];
  [__main_id release_stub];
  __main_id = main_id;
  __main_id_isset = YES;
}

- (BOOL) main_idIsSet {
  return __main_id_isset;
}

- (void) unsetMain_id {
  [__main_id release_stub];
  __main_id = nil;
  __main_id_isset = NO;
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (NSString *) body {
  return [[__body retain_stub] autorelease_stub];
}

- (void) setBody: (NSString *) body {
  [body retain_stub];
  [__body release_stub];
  __body = body;
  __body_isset = YES;
}

- (BOOL) bodyIsSet {
  return __body_isset;
}

- (void) unsetBody {
  [__body release_stub];
  __body = nil;
  __body_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMain_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NoticeDetail"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__main_id_isset) {
    if (__main_id != nil) {
      [outProtocol writeFieldBeginWithName: @"main_id" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __main_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__body_isset) {
    if (__body != nil) {
      [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __body];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NoticeDetail("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",main_id:"];
  [ms appendFormat: @"\"%@\"", __main_id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",body:"];
  [ms appendFormat: @"\"%@\"", __body];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Sort

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name url: (NSString *) url op: (NSString *) op op_time: (NSString *) op_time
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  __op = [op retain_stub];
  __op_isset = YES;
  __op_time = [op_time retain_stub];
  __op_time_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  if ([decoder containsValueForKey: @"op"])
  {
    __op = [[decoder decodeObjectForKey: @"op"] retain_stub];
    __op_isset = YES;
  }
  if ([decoder containsValueForKey: @"op_time"])
  {
    __op_time = [[decoder decodeObjectForKey: @"op_time"] retain_stub];
    __op_time_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
  if (__op_isset)
  {
    [encoder encodeObject: __op forKey: @"op"];
  }
  if (__op_time_isset)
  {
    [encoder encodeObject: __op_time forKey: @"op_time"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __url_isset ? 2654435761 : 0;
  if (__url_isset)
  {
    hash = (hash * 31) ^ [__url hash];
  }
  hash = (hash * 31) ^ __op_isset ? 2654435761 : 0;
  if (__op_isset)
  {
    hash = (hash * 31) ^ [__op hash];
  }
  hash = (hash * 31) ^ __op_time_isset ? 2654435761 : 0;
  if (__op_time_isset)
  {
    hash = (hash * 31) ^ [__op_time hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Sort class]]) {
    return NO;
  }
  Sort *other = (Sort *)anObject;
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__url_isset != other->__url_isset) ||
      (__url_isset && ((__url || other->__url) && ![__url isEqual:other->__url]))) {
    return NO;
  }
  if ((__op_isset != other->__op_isset) ||
      (__op_isset && ((__op || other->__op) && ![__op isEqual:other->__op]))) {
    return NO;
  }
  if ((__op_time_isset != other->__op_time_isset) ||
      (__op_time_isset && ((__op_time || other->__op_time) && ![__op_time isEqual:other->__op_time]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__url release_stub];
  [__op release_stub];
  [__op_time release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (NSString *) op {
  return [[__op retain_stub] autorelease_stub];
}

- (void) setOp: (NSString *) op {
  [op retain_stub];
  [__op release_stub];
  __op = op;
  __op_isset = YES;
}

- (BOOL) opIsSet {
  return __op_isset;
}

- (void) unsetOp {
  [__op release_stub];
  __op = nil;
  __op_isset = NO;
}

- (NSString *) op_time {
  return [[__op_time retain_stub] autorelease_stub];
}

- (void) setOp_time: (NSString *) op_time {
  [op_time retain_stub];
  [__op_time release_stub];
  __op_time = op_time;
  __op_time_isset = YES;
}

- (BOOL) op_timeIsSet {
  return __op_time_isset;
}

- (void) unsetOp_time {
  [__op_time release_stub];
  __op_time = nil;
  __op_time_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOp_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Sort"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__op_isset) {
    if (__op != nil) {
      [outProtocol writeFieldBeginWithName: @"op" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __op];
      [outProtocol writeFieldEnd];
    }
  }
  if (__op_time_isset) {
    if (__op_time != nil) {
      [outProtocol writeFieldBeginWithName: @"op_time" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __op_time];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Sort("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",op:"];
  [ms appendFormat: @"\"%@\"", __op];
  [ms appendString: @",op_time:"];
  [ms appendFormat: @"\"%@\"", __op_time];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Pic

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id title: (NSString *) title url: (NSString *) url state: (NSString *) state op: (NSString *) op op_time: (NSString *) op_time back: (Back *) back
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  __state = [state retain_stub];
  __state_isset = YES;
  __op = [op retain_stub];
  __op_isset = YES;
  __op_time = [op_time retain_stub];
  __op_time_isset = YES;
  __back = [back retain_stub];
  __back_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [[decoder decodeObjectForKey: @"state"] retain_stub];
    __state_isset = YES;
  }
  if ([decoder containsValueForKey: @"op"])
  {
    __op = [[decoder decodeObjectForKey: @"op"] retain_stub];
    __op_isset = YES;
  }
  if ([decoder containsValueForKey: @"op_time"])
  {
    __op_time = [[decoder decodeObjectForKey: @"op_time"] retain_stub];
    __op_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"back"])
  {
    __back = [[decoder decodeObjectForKey: @"back"] retain_stub];
    __back_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
  if (__state_isset)
  {
    [encoder encodeObject: __state forKey: @"state"];
  }
  if (__op_isset)
  {
    [encoder encodeObject: __op forKey: @"op"];
  }
  if (__op_time_isset)
  {
    [encoder encodeObject: __op_time forKey: @"op_time"];
  }
  if (__back_isset)
  {
    [encoder encodeObject: __back forKey: @"back"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __title_isset ? 2654435761 : 0;
  if (__title_isset)
  {
    hash = (hash * 31) ^ [__title hash];
  }
  hash = (hash * 31) ^ __url_isset ? 2654435761 : 0;
  if (__url_isset)
  {
    hash = (hash * 31) ^ [__url hash];
  }
  hash = (hash * 31) ^ __state_isset ? 2654435761 : 0;
  if (__state_isset)
  {
    hash = (hash * 31) ^ [__state hash];
  }
  hash = (hash * 31) ^ __op_isset ? 2654435761 : 0;
  if (__op_isset)
  {
    hash = (hash * 31) ^ [__op hash];
  }
  hash = (hash * 31) ^ __op_time_isset ? 2654435761 : 0;
  if (__op_time_isset)
  {
    hash = (hash * 31) ^ [__op_time hash];
  }
  hash = (hash * 31) ^ __back_isset ? 2654435761 : 0;
  if (__back_isset)
  {
    hash = (hash * 31) ^ [__back hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Pic class]]) {
    return NO;
  }
  Pic *other = (Pic *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__title_isset != other->__title_isset) ||
      (__title_isset && ((__title || other->__title) && ![__title isEqual:other->__title]))) {
    return NO;
  }
  if ((__url_isset != other->__url_isset) ||
      (__url_isset && ((__url || other->__url) && ![__url isEqual:other->__url]))) {
    return NO;
  }
  if ((__state_isset != other->__state_isset) ||
      (__state_isset && ((__state || other->__state) && ![__state isEqual:other->__state]))) {
    return NO;
  }
  if ((__op_isset != other->__op_isset) ||
      (__op_isset && ((__op || other->__op) && ![__op isEqual:other->__op]))) {
    return NO;
  }
  if ((__op_time_isset != other->__op_time_isset) ||
      (__op_time_isset && ((__op_time || other->__op_time) && ![__op_time isEqual:other->__op_time]))) {
    return NO;
  }
  if ((__back_isset != other->__back_isset) ||
      (__back_isset && ((__back || other->__back) && ![__back isEqual:other->__back]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__title release_stub];
  [__url release_stub];
  [__state release_stub];
  [__op release_stub];
  [__op_time release_stub];
  [__back release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (NSString *) state {
  return [[__state retain_stub] autorelease_stub];
}

- (void) setState: (NSString *) state {
  [state retain_stub];
  [__state release_stub];
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  [__state release_stub];
  __state = nil;
  __state_isset = NO;
}

- (NSString *) op {
  return [[__op retain_stub] autorelease_stub];
}

- (void) setOp: (NSString *) op {
  [op retain_stub];
  [__op release_stub];
  __op = op;
  __op_isset = YES;
}

- (BOOL) opIsSet {
  return __op_isset;
}

- (void) unsetOp {
  [__op release_stub];
  __op = nil;
  __op_isset = NO;
}

- (NSString *) op_time {
  return [[__op_time retain_stub] autorelease_stub];
}

- (void) setOp_time: (NSString *) op_time {
  [op_time retain_stub];
  [__op_time release_stub];
  __op_time = op_time;
  __op_time_isset = YES;
}

- (BOOL) op_timeIsSet {
  return __op_time_isset;
}

- (void) unsetOp_time {
  [__op_time release_stub];
  __op_time = nil;
  __op_time_isset = NO;
}

- (Back *) back {
  return [[__back retain_stub] autorelease_stub];
}

- (void) setBack: (Back *) back {
  [back retain_stub];
  [__back release_stub];
  __back = back;
  __back_isset = YES;
}

- (BOOL) backIsSet {
  return __back_isset;
}

- (void) unsetBack {
  [__back release_stub];
  __back = nil;
  __back_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOp_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          Back *fieldValue = [[Back alloc] init];
          [fieldValue read: inProtocol];
          [self setBack: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Pic"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__state_isset) {
    if (__state != nil) {
      [outProtocol writeFieldBeginWithName: @"state" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __state];
      [outProtocol writeFieldEnd];
    }
  }
  if (__op_isset) {
    if (__op != nil) {
      [outProtocol writeFieldBeginWithName: @"op" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __op];
      [outProtocol writeFieldEnd];
    }
  }
  if (__op_time_isset) {
    if (__op_time != nil) {
      [outProtocol writeFieldBeginWithName: @"op_time" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __op_time];
      [outProtocol writeFieldEnd];
    }
  }
  if (__back_isset) {
    if (__back != nil) {
      [outProtocol writeFieldBeginWithName: @"back" type: TType_STRUCT fieldID: 7];
      [__back write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Pic("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",state:"];
  [ms appendFormat: @"\"%@\"", __state];
  [ms appendString: @",op:"];
  [ms appendFormat: @"\"%@\"", __op];
  [ms appendString: @",op_time:"];
  [ms appendFormat: @"\"%@\"", __op_time];
  [ms appendString: @",back:"];
  [ms appendFormat: @"%@", __back];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation PicDetail

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id main_id: (NSString *) main_id url: (NSString *) url desc: (NSString *) desc
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __main_id = [main_id retain_stub];
  __main_id_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"main_id"])
  {
    __main_id = [[decoder decodeObjectForKey: @"main_id"] retain_stub];
    __main_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__main_id_isset)
  {
    [encoder encodeObject: __main_id forKey: @"main_id"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __main_id_isset ? 2654435761 : 0;
  if (__main_id_isset)
  {
    hash = (hash * 31) ^ [__main_id hash];
  }
  hash = (hash * 31) ^ __url_isset ? 2654435761 : 0;
  if (__url_isset)
  {
    hash = (hash * 31) ^ [__url hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[PicDetail class]]) {
    return NO;
  }
  PicDetail *other = (PicDetail *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__main_id_isset != other->__main_id_isset) ||
      (__main_id_isset && ((__main_id || other->__main_id) && ![__main_id isEqual:other->__main_id]))) {
    return NO;
  }
  if ((__url_isset != other->__url_isset) ||
      (__url_isset && ((__url || other->__url) && ![__url isEqual:other->__url]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__main_id release_stub];
  [__url release_stub];
  [__desc release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) main_id {
  return [[__main_id retain_stub] autorelease_stub];
}

- (void) setMain_id: (NSString *) main_id {
  [main_id retain_stub];
  [__main_id release_stub];
  __main_id = main_id;
  __main_id_isset = YES;
}

- (BOOL) main_idIsSet {
  return __main_id_isset;
}

- (void) unsetMain_id {
  [__main_id release_stub];
  __main_id = nil;
  __main_id_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMain_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PicDetail"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__main_id_isset) {
    if (__main_id != nil) {
      [outProtocol writeFieldBeginWithName: @"main_id" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __main_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PicDetail("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",main_id:"];
  [ms appendFormat: @"\"%@\"", __main_id];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BuildList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithData: (NSMutableArray *) data totalSize: (int32_t) totalSize
{
  self = [super init];
  __data = [data retain_stub];
  __data_isset = YES;
  __totalSize = totalSize;
  __totalSize_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalSize"])
  {
    __totalSize = [decoder decodeInt32ForKey: @"totalSize"];
    __totalSize_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
  if (__totalSize_isset)
  {
    [encoder encodeInt32: __totalSize forKey: @"totalSize"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  hash = (hash * 31) ^ __totalSize_isset ? 2654435761 : 0;
  if (__totalSize_isset)
  {
    hash = (hash * 31) ^ [@(__totalSize) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BuildList class]]) {
    return NO;
  }
  BuildList *other = (BuildList *)anObject;
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  if ((__totalSize_isset != other->__totalSize_isset) ||
      (__totalSize_isset && (__totalSize != other->__totalSize))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableArray *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (int32_t) totalSize {
  return __totalSize;
}

- (void) setTotalSize: (int32_t) totalSize {
  __totalSize = totalSize;
  __totalSize_isset = YES;
}

- (BOOL) totalSizeIsSet {
  return __totalSize_isset;
}

- (void) unsetTotalSize {
  __totalSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            Build *_elem2 = [[Build alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotalSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BuildList"];
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__data count]];
        int idx4;
        for (idx4 = 0; idx4 < [__data count]; idx4++)
        {
          [[__data objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalSize_isset) {
    [outProtocol writeFieldBeginWithName: @"totalSize" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __totalSize];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BuildList("];
  [ms appendString: @"data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @",totalSize:"];
  [ms appendFormat: @"%i", __totalSize];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CommentList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithData: (NSMutableArray *) data totalSize: (int32_t) totalSize
{
  self = [super init];
  __data = [data retain_stub];
  __data_isset = YES;
  __totalSize = totalSize;
  __totalSize_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalSize"])
  {
    __totalSize = [decoder decodeInt32ForKey: @"totalSize"];
    __totalSize_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
  if (__totalSize_isset)
  {
    [encoder encodeInt32: __totalSize forKey: @"totalSize"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  hash = (hash * 31) ^ __totalSize_isset ? 2654435761 : 0;
  if (__totalSize_isset)
  {
    hash = (hash * 31) ^ [@(__totalSize) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CommentList class]]) {
    return NO;
  }
  CommentList *other = (CommentList *)anObject;
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  if ((__totalSize_isset != other->__totalSize_isset) ||
      (__totalSize_isset && (__totalSize != other->__totalSize))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableArray *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (int32_t) totalSize {
  return __totalSize;
}

- (void) setTotalSize: (int32_t) totalSize {
  __totalSize = totalSize;
  __totalSize_isset = YES;
}

- (BOOL) totalSizeIsSet {
  return __totalSize_isset;
}

- (void) unsetTotalSize {
  __totalSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            Comment *_elem7 = [[Comment alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotalSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CommentList"];
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__data count]];
        int idx9;
        for (idx9 = 0; idx9 < [__data count]; idx9++)
        {
          [[__data objectAtIndex: idx9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalSize_isset) {
    [outProtocol writeFieldBeginWithName: @"totalSize" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __totalSize];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CommentList("];
  [ms appendString: @"data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @",totalSize:"];
  [ms appendFormat: @"%i", __totalSize];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NoticeList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithData: (NSMutableArray *) data totalSize: (int32_t) totalSize
{
  self = [super init];
  __data = [data retain_stub];
  __data_isset = YES;
  __totalSize = totalSize;
  __totalSize_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalSize"])
  {
    __totalSize = [decoder decodeInt32ForKey: @"totalSize"];
    __totalSize_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
  if (__totalSize_isset)
  {
    [encoder encodeInt32: __totalSize forKey: @"totalSize"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  hash = (hash * 31) ^ __totalSize_isset ? 2654435761 : 0;
  if (__totalSize_isset)
  {
    hash = (hash * 31) ^ [@(__totalSize) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NoticeList class]]) {
    return NO;
  }
  NoticeList *other = (NoticeList *)anObject;
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  if ((__totalSize_isset != other->__totalSize_isset) ||
      (__totalSize_isset && (__totalSize != other->__totalSize))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableArray *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (int32_t) totalSize {
  return __totalSize;
}

- (void) setTotalSize: (int32_t) totalSize {
  __totalSize = totalSize;
  __totalSize_isset = YES;
}

- (BOOL) totalSizeIsSet {
  return __totalSize_isset;
}

- (void) unsetTotalSize {
  __totalSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            Notice *_elem12 = [[Notice alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotalSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NoticeList"];
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__data count]];
        int idx14;
        for (idx14 = 0; idx14 < [__data count]; idx14++)
        {
          [[__data objectAtIndex: idx14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalSize_isset) {
    [outProtocol writeFieldBeginWithName: @"totalSize" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __totalSize];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NoticeList("];
  [ms appendString: @"data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @",totalSize:"];
  [ms appendFormat: @"%i", __totalSize];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation PicList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithData: (NSMutableArray *) data totalSize: (int32_t) totalSize
{
  self = [super init];
  __data = [data retain_stub];
  __data_isset = YES;
  __totalSize = totalSize;
  __totalSize_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalSize"])
  {
    __totalSize = [decoder decodeInt32ForKey: @"totalSize"];
    __totalSize_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
  if (__totalSize_isset)
  {
    [encoder encodeInt32: __totalSize forKey: @"totalSize"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  hash = (hash * 31) ^ __totalSize_isset ? 2654435761 : 0;
  if (__totalSize_isset)
  {
    hash = (hash * 31) ^ [@(__totalSize) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[PicList class]]) {
    return NO;
  }
  PicList *other = (PicList *)anObject;
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  if ((__totalSize_isset != other->__totalSize_isset) ||
      (__totalSize_isset && (__totalSize != other->__totalSize))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableArray *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (int32_t) totalSize {
  return __totalSize;
}

- (void) setTotalSize: (int32_t) totalSize {
  __totalSize = totalSize;
  __totalSize_isset = YES;
}

- (BOOL) totalSizeIsSet {
  return __totalSize_isset;
}

- (void) unsetTotalSize {
  __totalSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            Pic *_elem17 = [[Pic alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release_stub];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotalSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PicList"];
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__data count]];
        int idx19;
        for (idx19 = 0; idx19 < [__data count]; idx19++)
        {
          [[__data objectAtIndex: idx19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalSize_isset) {
    [outProtocol writeFieldBeginWithName: @"totalSize" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __totalSize];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PicList("];
  [ms appendString: @"data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @",totalSize:"];
  [ms appendFormat: @"%i", __totalSize];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SortList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithData: (NSMutableArray *) data totalSize: (int32_t) totalSize
{
  self = [super init];
  __data = [data retain_stub];
  __data_isset = YES;
  __totalSize = totalSize;
  __totalSize_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalSize"])
  {
    __totalSize = [decoder decodeInt32ForKey: @"totalSize"];
    __totalSize_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
  if (__totalSize_isset)
  {
    [encoder encodeInt32: __totalSize forKey: @"totalSize"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  hash = (hash * 31) ^ __totalSize_isset ? 2654435761 : 0;
  if (__totalSize_isset)
  {
    hash = (hash * 31) ^ [@(__totalSize) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SortList class]]) {
    return NO;
  }
  SortList *other = (SortList *)anObject;
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  if ((__totalSize_isset != other->__totalSize_isset) ||
      (__totalSize_isset && (__totalSize != other->__totalSize))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableArray *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (int32_t) totalSize {
  return __totalSize;
}

- (void) setTotalSize: (int32_t) totalSize {
  __totalSize = totalSize;
  __totalSize_isset = YES;
}

- (BOOL) totalSizeIsSet {
  return __totalSize_isset;
}

- (void) unsetTotalSize {
  __totalSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            Sort *_elem22 = [[Sort alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotalSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SortList"];
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__data count]];
        int idx24;
        for (idx24 = 0; idx24 < [__data count]; idx24++)
        {
          [[__data objectAtIndex: idx24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalSize_isset) {
    [outProtocol writeFieldBeginWithName: @"totalSize" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __totalSize];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SortList("];
  [ms appendString: @"data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @",totalSize:"];
  [ms appendFormat: @"%i", __totalSize];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation buildConstants
+ (void) initialize {
}
@end

@interface create_args : NSObject <TBase, NSCoding> {
  Account * __account;

  BOOL __account_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=account, setter=setAccount:) Account * account;
#endif

- (id) init;
- (id) initWithAccount: (Account *) account;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Account *) account;
- (void) setAccount: (Account *) account;
#endif
- (BOOL) accountIsSet;

@end

@implementation create_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAccount: (Account *) account
{
  self = [super init];
  __account = [account retain_stub];
  __account_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"account"])
  {
    __account = [[decoder decodeObjectForKey: @"account"] retain_stub];
    __account_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__account_isset)
  {
    [encoder encodeObject: __account forKey: @"account"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __account_isset ? 2654435761 : 0;
  if (__account_isset)
  {
    hash = (hash * 31) ^ [__account hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[create_args class]]) {
    return NO;
  }
  create_args *other = (create_args *)anObject;
  if ((__account_isset != other->__account_isset) ||
      (__account_isset && ((__account || other->__account) && ![__account isEqual:other->__account]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__account release_stub];
  [super dealloc_stub];
}

- (Account *) account {
  return [[__account retain_stub] autorelease_stub];
}

- (void) setAccount: (Account *) account {
  [account retain_stub];
  [__account release_stub];
  __account = account;
  __account_isset = YES;
}

- (BOOL) accountIsSet {
  return __account_isset;
}

- (void) unsetAccount {
  [__account release_stub];
  __account = nil;
  __account_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Account *fieldValue = [[Account alloc] init];
          [fieldValue read: inProtocol];
          [self setAccount: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"create_args"];
  if (__account_isset) {
    if (__account != nil) {
      [outProtocol writeFieldBeginWithName: @"account" type: TType_STRUCT fieldID: 1];
      [__account write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"create_args("];
  [ms appendString: @"account:"];
  [ms appendFormat: @"%@", __account];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Create_result : NSObject <TBase, NSCoding> {
  Account * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Account * success;
#endif

- (id) init;
- (id) initWithSuccess: (Account *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Account *) success;
- (void) setSuccess: (Account *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Create_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Account *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Create_result class]]) {
    return NO;
  }
  Create_result *other = (Create_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Account *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Account *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Account *fieldValue = [[Account alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Create_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Create_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface login_args : NSObject <TBase, NSCoding> {
  Account * __account;

  BOOL __account_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=account, setter=setAccount:) Account * account;
#endif

- (id) init;
- (id) initWithAccount: (Account *) account;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Account *) account;
- (void) setAccount: (Account *) account;
#endif
- (BOOL) accountIsSet;

@end

@implementation login_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAccount: (Account *) account
{
  self = [super init];
  __account = [account retain_stub];
  __account_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"account"])
  {
    __account = [[decoder decodeObjectForKey: @"account"] retain_stub];
    __account_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__account_isset)
  {
    [encoder encodeObject: __account forKey: @"account"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __account_isset ? 2654435761 : 0;
  if (__account_isset)
  {
    hash = (hash * 31) ^ [__account hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[login_args class]]) {
    return NO;
  }
  login_args *other = (login_args *)anObject;
  if ((__account_isset != other->__account_isset) ||
      (__account_isset && ((__account || other->__account) && ![__account isEqual:other->__account]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__account release_stub];
  [super dealloc_stub];
}

- (Account *) account {
  return [[__account retain_stub] autorelease_stub];
}

- (void) setAccount: (Account *) account {
  [account retain_stub];
  [__account release_stub];
  __account = account;
  __account_isset = YES;
}

- (BOOL) accountIsSet {
  return __account_isset;
}

- (void) unsetAccount {
  [__account release_stub];
  __account = nil;
  __account_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Account *fieldValue = [[Account alloc] init];
          [fieldValue read: inProtocol];
          [self setAccount: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (__account_isset) {
    if (__account != nil) {
      [outProtocol writeFieldBeginWithName: @"account" type: TType_STRUCT fieldID: 1];
      [__account write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"login_args("];
  [ms appendString: @"account:"];
  [ms appendFormat: @"%@", __account];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Login_result : NSObject <TBase, NSCoding> {
  Account * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Account * success;
#endif

- (id) init;
- (id) initWithSuccess: (Account *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Account *) success;
- (void) setSuccess: (Account *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Login_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Account *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Login_result class]]) {
    return NO;
  }
  Login_result *other = (Login_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Account *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Account *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Account *fieldValue = [[Account alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getMenu_args : NSObject <TBase, NSCoding> {
  NSString * __seq_no;

  BOOL __seq_no_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=seq_no, setter=setSeq_no:) NSString * seq_no;
#endif

- (id) init;
- (id) initWithSeq_no: (NSString *) seq_no;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) seq_no;
- (void) setSeq_no: (NSString *) seq_no;
#endif
- (BOOL) seq_noIsSet;

@end

@implementation getMenu_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSeq_no: (NSString *) seq_no
{
  self = [super init];
  __seq_no = [seq_no retain_stub];
  __seq_no_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"seq_no"])
  {
    __seq_no = [[decoder decodeObjectForKey: @"seq_no"] retain_stub];
    __seq_no_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__seq_no_isset)
  {
    [encoder encodeObject: __seq_no forKey: @"seq_no"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __seq_no_isset ? 2654435761 : 0;
  if (__seq_no_isset)
  {
    hash = (hash * 31) ^ [__seq_no hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getMenu_args class]]) {
    return NO;
  }
  getMenu_args *other = (getMenu_args *)anObject;
  if ((__seq_no_isset != other->__seq_no_isset) ||
      (__seq_no_isset && ((__seq_no || other->__seq_no) && ![__seq_no isEqual:other->__seq_no]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__seq_no release_stub];
  [super dealloc_stub];
}

- (NSString *) seq_no {
  return [[__seq_no retain_stub] autorelease_stub];
}

- (void) setSeq_no: (NSString *) seq_no {
  [seq_no retain_stub];
  [__seq_no release_stub];
  __seq_no = seq_no;
  __seq_no_isset = YES;
}

- (BOOL) seq_noIsSet {
  return __seq_no_isset;
}

- (void) unsetSeq_no {
  [__seq_no release_stub];
  __seq_no = nil;
  __seq_no_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSeq_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMenu_args"];
  if (__seq_no_isset) {
    if (__seq_no != nil) {
      [outProtocol writeFieldBeginWithName: @"seq_no" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __seq_no];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getMenu_args("];
  [ms appendString: @"seq_no:"];
  [ms appendFormat: @"\"%@\"", __seq_no];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMenu_result : NSObject <TBase, NSCoding> {
  MenuList * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) MenuList * success;
#endif

- (id) init;
- (id) initWithSuccess: (MenuList *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (MenuList *) success;
- (void) setSuccess: (MenuList *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetMenu_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (MenuList *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetMenu_result class]]) {
    return NO;
  }
  GetMenu_result *other = (GetMenu_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (MenuList *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (MenuList *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          MenuList *fieldValue = [[MenuList alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMenu_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMenu_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface findBuilds_args : NSObject <TBase, NSCoding> {
  Build * __build;
  Page * __page;

  BOOL __build_isset;
  BOOL __page_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=build, setter=setBuild:) Build * build;
@property (nonatomic, retain, getter=page, setter=setPage:) Page * page;
#endif

- (id) init;
- (id) initWithBuild: (Build *) build page: (Page *) page;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Build *) build;
- (void) setBuild: (Build *) build;
#endif
- (BOOL) buildIsSet;

#if !__has_feature(objc_arc)
- (Page *) page;
- (void) setPage: (Page *) page;
#endif
- (BOOL) pageIsSet;

@end

@implementation findBuilds_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBuild: (Build *) build page: (Page *) page
{
  self = [super init];
  __build = [build retain_stub];
  __build_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"build"])
  {
    __build = [[decoder decodeObjectForKey: @"build"] retain_stub];
    __build_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__build_isset)
  {
    [encoder encodeObject: __build forKey: @"build"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __build_isset ? 2654435761 : 0;
  if (__build_isset)
  {
    hash = (hash * 31) ^ [__build hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[findBuilds_args class]]) {
    return NO;
  }
  findBuilds_args *other = (findBuilds_args *)anObject;
  if ((__build_isset != other->__build_isset) ||
      (__build_isset && ((__build || other->__build) && ![__build isEqual:other->__build]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__build release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (Build *) build {
  return [[__build retain_stub] autorelease_stub];
}

- (void) setBuild: (Build *) build {
  [build retain_stub];
  [__build release_stub];
  __build = build;
  __build_isset = YES;
}

- (BOOL) buildIsSet {
  return __build_isset;
}

- (void) unsetBuild {
  [__build release_stub];
  __build = nil;
  __build_isset = NO;
}

- (Page *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (Page *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Build *fieldValue = [[Build alloc] init];
          [fieldValue read: inProtocol];
          [self setBuild: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Page *fieldValue = [[Page alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"findBuilds_args"];
  if (__build_isset) {
    if (__build != nil) {
      [outProtocol writeFieldBeginWithName: @"build" type: TType_STRUCT fieldID: 1];
      [__build write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"findBuilds_args("];
  [ms appendString: @"build:"];
  [ms appendFormat: @"%@", __build];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface FindBuilds_result : NSObject <TBase, NSCoding> {
  BuildList * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BuildList * success;
#endif

- (id) init;
- (id) initWithSuccess: (BuildList *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BuildList *) success;
- (void) setSuccess: (BuildList *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation FindBuilds_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BuildList *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[FindBuilds_result class]]) {
    return NO;
  }
  FindBuilds_result *other = (FindBuilds_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (BuildList *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BuildList *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BuildList *fieldValue = [[BuildList alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindBuilds_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FindBuilds_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface findComments_args : NSObject <TBase, NSCoding> {
  Comment * __comment;
  Page * __page;

  BOOL __comment_isset;
  BOOL __page_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=comment, setter=setComment:) Comment * comment;
@property (nonatomic, retain, getter=page, setter=setPage:) Page * page;
#endif

- (id) init;
- (id) initWithComment: (Comment *) comment page: (Page *) page;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Comment *) comment;
- (void) setComment: (Comment *) comment;
#endif
- (BOOL) commentIsSet;

#if !__has_feature(objc_arc)
- (Page *) page;
- (void) setPage: (Page *) page;
#endif
- (BOOL) pageIsSet;

@end

@implementation findComments_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithComment: (Comment *) comment page: (Page *) page
{
  self = [super init];
  __comment = [comment retain_stub];
  __comment_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"comment"])
  {
    __comment = [[decoder decodeObjectForKey: @"comment"] retain_stub];
    __comment_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__comment_isset)
  {
    [encoder encodeObject: __comment forKey: @"comment"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __comment_isset ? 2654435761 : 0;
  if (__comment_isset)
  {
    hash = (hash * 31) ^ [__comment hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[findComments_args class]]) {
    return NO;
  }
  findComments_args *other = (findComments_args *)anObject;
  if ((__comment_isset != other->__comment_isset) ||
      (__comment_isset && ((__comment || other->__comment) && ![__comment isEqual:other->__comment]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__comment release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (Comment *) comment {
  return [[__comment retain_stub] autorelease_stub];
}

- (void) setComment: (Comment *) comment {
  [comment retain_stub];
  [__comment release_stub];
  __comment = comment;
  __comment_isset = YES;
}

- (BOOL) commentIsSet {
  return __comment_isset;
}

- (void) unsetComment {
  [__comment release_stub];
  __comment = nil;
  __comment_isset = NO;
}

- (Page *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (Page *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Comment *fieldValue = [[Comment alloc] init];
          [fieldValue read: inProtocol];
          [self setComment: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Page *fieldValue = [[Page alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"findComments_args"];
  if (__comment_isset) {
    if (__comment != nil) {
      [outProtocol writeFieldBeginWithName: @"comment" type: TType_STRUCT fieldID: 1];
      [__comment write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"findComments_args("];
  [ms appendString: @"comment:"];
  [ms appendFormat: @"%@", __comment];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface FindComments_result : NSObject <TBase, NSCoding> {
  CommentList * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) CommentList * success;
#endif

- (id) init;
- (id) initWithSuccess: (CommentList *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (CommentList *) success;
- (void) setSuccess: (CommentList *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation FindComments_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (CommentList *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[FindComments_result class]]) {
    return NO;
  }
  FindComments_result *other = (FindComments_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (CommentList *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (CommentList *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          CommentList *fieldValue = [[CommentList alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindComments_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FindComments_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface findNotices_args : NSObject <TBase, NSCoding> {
  Notice * __notice;
  Page * __page;

  BOOL __notice_isset;
  BOOL __page_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=notice, setter=setNotice:) Notice * notice;
@property (nonatomic, retain, getter=page, setter=setPage:) Page * page;
#endif

- (id) init;
- (id) initWithNotice: (Notice *) notice page: (Page *) page;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Notice *) notice;
- (void) setNotice: (Notice *) notice;
#endif
- (BOOL) noticeIsSet;

#if !__has_feature(objc_arc)
- (Page *) page;
- (void) setPage: (Page *) page;
#endif
- (BOOL) pageIsSet;

@end

@implementation findNotices_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithNotice: (Notice *) notice page: (Page *) page
{
  self = [super init];
  __notice = [notice retain_stub];
  __notice_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"notice"])
  {
    __notice = [[decoder decodeObjectForKey: @"notice"] retain_stub];
    __notice_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__notice_isset)
  {
    [encoder encodeObject: __notice forKey: @"notice"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __notice_isset ? 2654435761 : 0;
  if (__notice_isset)
  {
    hash = (hash * 31) ^ [__notice hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[findNotices_args class]]) {
    return NO;
  }
  findNotices_args *other = (findNotices_args *)anObject;
  if ((__notice_isset != other->__notice_isset) ||
      (__notice_isset && ((__notice || other->__notice) && ![__notice isEqual:other->__notice]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__notice release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (Notice *) notice {
  return [[__notice retain_stub] autorelease_stub];
}

- (void) setNotice: (Notice *) notice {
  [notice retain_stub];
  [__notice release_stub];
  __notice = notice;
  __notice_isset = YES;
}

- (BOOL) noticeIsSet {
  return __notice_isset;
}

- (void) unsetNotice {
  [__notice release_stub];
  __notice = nil;
  __notice_isset = NO;
}

- (Page *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (Page *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Notice *fieldValue = [[Notice alloc] init];
          [fieldValue read: inProtocol];
          [self setNotice: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Page *fieldValue = [[Page alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"findNotices_args"];
  if (__notice_isset) {
    if (__notice != nil) {
      [outProtocol writeFieldBeginWithName: @"notice" type: TType_STRUCT fieldID: 1];
      [__notice write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"findNotices_args("];
  [ms appendString: @"notice:"];
  [ms appendFormat: @"%@", __notice];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface FindNotices_result : NSObject <TBase, NSCoding> {
  NoticeList * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NoticeList * success;
#endif

- (id) init;
- (id) initWithSuccess: (NoticeList *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NoticeList *) success;
- (void) setSuccess: (NoticeList *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation FindNotices_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NoticeList *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[FindNotices_result class]]) {
    return NO;
  }
  FindNotices_result *other = (FindNotices_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NoticeList *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NoticeList *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NoticeList *fieldValue = [[NoticeList alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindNotices_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FindNotices_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface findSorts_args : NSObject <TBase, NSCoding> {
  Sort * __sort;
  Page * __page;

  BOOL __sort_isset;
  BOOL __page_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sort, setter=setSort:) Sort * sort;
@property (nonatomic, retain, getter=page, setter=setPage:) Page * page;
#endif

- (id) init;
- (id) initWithSort: (Sort *) sort page: (Page *) page;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Sort *) sort;
- (void) setSort: (Sort *) sort;
#endif
- (BOOL) sortIsSet;

#if !__has_feature(objc_arc)
- (Page *) page;
- (void) setPage: (Page *) page;
#endif
- (BOOL) pageIsSet;

@end

@implementation findSorts_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSort: (Sort *) sort page: (Page *) page
{
  self = [super init];
  __sort = [sort retain_stub];
  __sort_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sort"])
  {
    __sort = [[decoder decodeObjectForKey: @"sort"] retain_stub];
    __sort_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sort_isset)
  {
    [encoder encodeObject: __sort forKey: @"sort"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __sort_isset ? 2654435761 : 0;
  if (__sort_isset)
  {
    hash = (hash * 31) ^ [__sort hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[findSorts_args class]]) {
    return NO;
  }
  findSorts_args *other = (findSorts_args *)anObject;
  if ((__sort_isset != other->__sort_isset) ||
      (__sort_isset && ((__sort || other->__sort) && ![__sort isEqual:other->__sort]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__sort release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (Sort *) sort {
  return [[__sort retain_stub] autorelease_stub];
}

- (void) setSort: (Sort *) sort {
  [sort retain_stub];
  [__sort release_stub];
  __sort = sort;
  __sort_isset = YES;
}

- (BOOL) sortIsSet {
  return __sort_isset;
}

- (void) unsetSort {
  [__sort release_stub];
  __sort = nil;
  __sort_isset = NO;
}

- (Page *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (Page *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Sort *fieldValue = [[Sort alloc] init];
          [fieldValue read: inProtocol];
          [self setSort: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Page *fieldValue = [[Page alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"findSorts_args"];
  if (__sort_isset) {
    if (__sort != nil) {
      [outProtocol writeFieldBeginWithName: @"sort" type: TType_STRUCT fieldID: 1];
      [__sort write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"findSorts_args("];
  [ms appendString: @"sort:"];
  [ms appendFormat: @"%@", __sort];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface FindSorts_result : NSObject <TBase, NSCoding> {
  SortList * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SortList * success;
#endif

- (id) init;
- (id) initWithSuccess: (SortList *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SortList *) success;
- (void) setSuccess: (SortList *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation FindSorts_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (SortList *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[FindSorts_result class]]) {
    return NO;
  }
  FindSorts_result *other = (FindSorts_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (SortList *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (SortList *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SortList *fieldValue = [[SortList alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindSorts_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FindSorts_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface findPics_args : NSObject <TBase, NSCoding> {
  Pic * __pic;
  Page * __page;

  BOOL __pic_isset;
  BOOL __page_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=pic, setter=setPic:) Pic * pic;
@property (nonatomic, retain, getter=page, setter=setPage:) Page * page;
#endif

- (id) init;
- (id) initWithPic: (Pic *) pic page: (Page *) page;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Pic *) pic;
- (void) setPic: (Pic *) pic;
#endif
- (BOOL) picIsSet;

#if !__has_feature(objc_arc)
- (Page *) page;
- (void) setPage: (Page *) page;
#endif
- (BOOL) pageIsSet;

@end

@implementation findPics_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPic: (Pic *) pic page: (Page *) page
{
  self = [super init];
  __pic = [pic retain_stub];
  __pic_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pic"])
  {
    __pic = [[decoder decodeObjectForKey: @"pic"] retain_stub];
    __pic_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pic_isset)
  {
    [encoder encodeObject: __pic forKey: @"pic"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __pic_isset ? 2654435761 : 0;
  if (__pic_isset)
  {
    hash = (hash * 31) ^ [__pic hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[findPics_args class]]) {
    return NO;
  }
  findPics_args *other = (findPics_args *)anObject;
  if ((__pic_isset != other->__pic_isset) ||
      (__pic_isset && ((__pic || other->__pic) && ![__pic isEqual:other->__pic]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__pic release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (Pic *) pic {
  return [[__pic retain_stub] autorelease_stub];
}

- (void) setPic: (Pic *) pic {
  [pic retain_stub];
  [__pic release_stub];
  __pic = pic;
  __pic_isset = YES;
}

- (BOOL) picIsSet {
  return __pic_isset;
}

- (void) unsetPic {
  [__pic release_stub];
  __pic = nil;
  __pic_isset = NO;
}

- (Page *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (Page *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Pic *fieldValue = [[Pic alloc] init];
          [fieldValue read: inProtocol];
          [self setPic: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Page *fieldValue = [[Page alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"findPics_args"];
  if (__pic_isset) {
    if (__pic != nil) {
      [outProtocol writeFieldBeginWithName: @"pic" type: TType_STRUCT fieldID: 1];
      [__pic write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"findPics_args("];
  [ms appendString: @"pic:"];
  [ms appendFormat: @"%@", __pic];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface FindPics_result : NSObject <TBase, NSCoding> {
  PicList * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) PicList * success;
#endif

- (id) init;
- (id) initWithSuccess: (PicList *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (PicList *) success;
- (void) setSuccess: (PicList *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation FindPics_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (PicList *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[FindPics_result class]]) {
    return NO;
  }
  FindPics_result *other = (FindPics_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (PicList *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (PicList *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          PicList *fieldValue = [[PicList alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindPics_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FindPics_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface findAccounts_args : NSObject <TBase, NSCoding> {
  Account * __account;
  Page * __page;

  BOOL __account_isset;
  BOOL __page_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=account, setter=setAccount:) Account * account;
@property (nonatomic, retain, getter=page, setter=setPage:) Page * page;
#endif

- (id) init;
- (id) initWithAccount: (Account *) account page: (Page *) page;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Account *) account;
- (void) setAccount: (Account *) account;
#endif
- (BOOL) accountIsSet;

#if !__has_feature(objc_arc)
- (Page *) page;
- (void) setPage: (Page *) page;
#endif
- (BOOL) pageIsSet;

@end

@implementation findAccounts_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAccount: (Account *) account page: (Page *) page
{
  self = [super init];
  __account = [account retain_stub];
  __account_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"account"])
  {
    __account = [[decoder decodeObjectForKey: @"account"] retain_stub];
    __account_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__account_isset)
  {
    [encoder encodeObject: __account forKey: @"account"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __account_isset ? 2654435761 : 0;
  if (__account_isset)
  {
    hash = (hash * 31) ^ [__account hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[findAccounts_args class]]) {
    return NO;
  }
  findAccounts_args *other = (findAccounts_args *)anObject;
  if ((__account_isset != other->__account_isset) ||
      (__account_isset && ((__account || other->__account) && ![__account isEqual:other->__account]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__account release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (Account *) account {
  return [[__account retain_stub] autorelease_stub];
}

- (void) setAccount: (Account *) account {
  [account retain_stub];
  [__account release_stub];
  __account = account;
  __account_isset = YES;
}

- (BOOL) accountIsSet {
  return __account_isset;
}

- (void) unsetAccount {
  [__account release_stub];
  __account = nil;
  __account_isset = NO;
}

- (Page *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (Page *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Account *fieldValue = [[Account alloc] init];
          [fieldValue read: inProtocol];
          [self setAccount: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Page *fieldValue = [[Page alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"findAccounts_args"];
  if (__account_isset) {
    if (__account != nil) {
      [outProtocol writeFieldBeginWithName: @"account" type: TType_STRUCT fieldID: 1];
      [__account write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"findAccounts_args("];
  [ms appendString: @"account:"];
  [ms appendFormat: @"%@", __account];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface FindAccounts_result : NSObject <TBase, NSCoding> {
  AccountList * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AccountList * success;
#endif

- (id) init;
- (id) initWithSuccess: (AccountList *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AccountList *) success;
- (void) setSuccess: (AccountList *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation FindAccounts_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AccountList *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[FindAccounts_result class]]) {
    return NO;
  }
  FindAccounts_result *other = (FindAccounts_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (AccountList *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AccountList *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AccountList *fieldValue = [[AccountList alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindAccounts_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FindAccounts_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation buildSvcClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_create: (Account *) account
{
  [outProtocol writeMessageBeginWithName: @"create" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"create_args"];
  if (account != nil)  {
    [outProtocol writeFieldBeginWithName: @"account" type: TType_STRUCT fieldID: 1];
    [account write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Account *) recv_create
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Create_result * result = [[[Create_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"create failed: unknown result"];
}

- (Account *) create: (Account *) account
{
  [self send_create : account];
  [[outProtocol transport] flush];
  return [self recv_create];
}

- (void) send_login: (Account *) account
{
  [outProtocol writeMessageBeginWithName: @"login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (account != nil)  {
    [outProtocol writeFieldBeginWithName: @"account" type: TType_STRUCT fieldID: 1];
    [account write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Account *) recv_login
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Login_result * result = [[[Login_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"login failed: unknown result"];
}

- (Account *) login: (Account *) account
{
  [self send_login : account];
  [[outProtocol transport] flush];
  return [self recv_login];
}

- (void) send_getMenu: (NSString *) seq_no
{
  [outProtocol writeMessageBeginWithName: @"getMenu" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMenu_args"];
  if (seq_no != nil)  {
    [outProtocol writeFieldBeginWithName: @"seq_no" type: TType_STRING fieldID: 1];
    [outProtocol writeString: seq_no];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (MenuList *) recv_getMenu
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetMenu_result * result = [[[GetMenu_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMenu failed: unknown result"];
}

- (MenuList *) getMenu: (NSString *) seq_no
{
  [self send_getMenu : seq_no];
  [[outProtocol transport] flush];
  return [self recv_getMenu];
}

- (void) send_findBuilds: (Build *) build page: (Page *) page
{
  [outProtocol writeMessageBeginWithName: @"findBuilds" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"findBuilds_args"];
  if (build != nil)  {
    [outProtocol writeFieldBeginWithName: @"build" type: TType_STRUCT fieldID: 1];
    [build write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (page != nil)  {
    [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
    [page write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BuildList *) recv_findBuilds
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  FindBuilds_result * result = [[[FindBuilds_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"findBuilds failed: unknown result"];
}

- (BuildList *) findBuilds: (Build *) build page: (Page *) page
{
  [self send_findBuilds : build page: page];
  [[outProtocol transport] flush];
  return [self recv_findBuilds];
}

- (void) send_findComments: (Comment *) comment page: (Page *) page
{
  [outProtocol writeMessageBeginWithName: @"findComments" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"findComments_args"];
  if (comment != nil)  {
    [outProtocol writeFieldBeginWithName: @"comment" type: TType_STRUCT fieldID: 1];
    [comment write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (page != nil)  {
    [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
    [page write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (CommentList *) recv_findComments
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  FindComments_result * result = [[[FindComments_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"findComments failed: unknown result"];
}

- (CommentList *) findComments: (Comment *) comment page: (Page *) page
{
  [self send_findComments : comment page: page];
  [[outProtocol transport] flush];
  return [self recv_findComments];
}

- (void) send_findNotices: (Notice *) notice page: (Page *) page
{
  [outProtocol writeMessageBeginWithName: @"findNotices" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"findNotices_args"];
  if (notice != nil)  {
    [outProtocol writeFieldBeginWithName: @"notice" type: TType_STRUCT fieldID: 1];
    [notice write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (page != nil)  {
    [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
    [page write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NoticeList *) recv_findNotices
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  FindNotices_result * result = [[[FindNotices_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"findNotices failed: unknown result"];
}

- (NoticeList *) findNotices: (Notice *) notice page: (Page *) page
{
  [self send_findNotices : notice page: page];
  [[outProtocol transport] flush];
  return [self recv_findNotices];
}

- (void) send_findSorts: (Sort *) sort page: (Page *) page
{
  [outProtocol writeMessageBeginWithName: @"findSorts" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"findSorts_args"];
  if (sort != nil)  {
    [outProtocol writeFieldBeginWithName: @"sort" type: TType_STRUCT fieldID: 1];
    [sort write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (page != nil)  {
    [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
    [page write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (SortList *) recv_findSorts
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  FindSorts_result * result = [[[FindSorts_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"findSorts failed: unknown result"];
}

- (SortList *) findSorts: (Sort *) sort page: (Page *) page
{
  [self send_findSorts : sort page: page];
  [[outProtocol transport] flush];
  return [self recv_findSorts];
}

- (void) send_findPics: (Pic *) pic page: (Page *) page
{
  [outProtocol writeMessageBeginWithName: @"findPics" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"findPics_args"];
  if (pic != nil)  {
    [outProtocol writeFieldBeginWithName: @"pic" type: TType_STRUCT fieldID: 1];
    [pic write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (page != nil)  {
    [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
    [page write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (PicList *) recv_findPics
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  FindPics_result * result = [[[FindPics_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"findPics failed: unknown result"];
}

- (PicList *) findPics: (Pic *) pic page: (Page *) page
{
  [self send_findPics : pic page: page];
  [[outProtocol transport] flush];
  return [self recv_findPics];
}

- (void) send_findAccounts: (Account *) account page: (Page *) page
{
  [outProtocol writeMessageBeginWithName: @"findAccounts" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"findAccounts_args"];
  if (account != nil)  {
    [outProtocol writeFieldBeginWithName: @"account" type: TType_STRUCT fieldID: 1];
    [account write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (page != nil)  {
    [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
    [page write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (AccountList *) recv_findAccounts
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  FindAccounts_result * result = [[[FindAccounts_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"findAccounts failed: unknown result"];
}

- (AccountList *) findAccounts: (Account *) account page: (Page *) page
{
  [self send_findAccounts : account page: page];
  [[outProtocol transport] flush];
  return [self recv_findAccounts];
}

@end

@implementation buildSvcProcessor

- (id) initWithbuildSvc: (id <buildSvc>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_create_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"create"];
}
{
  SEL s = @selector(process_login_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"login"];
}
{
  SEL s = @selector(process_getMenu_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMenu"];
}
{
  SEL s = @selector(process_findBuilds_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"findBuilds"];
}
{
  SEL s = @selector(process_findComments_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"findComments"];
}
{
  SEL s = @selector(process_findNotices_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"findNotices"];
}
{
  SEL s = @selector(process_findSorts_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"findSorts"];
}
{
  SEL s = @selector(process_findPics_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"findPics"];
}
{
  SEL s = @selector(process_findAccounts_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"findAccounts"];
}
return self;
}

- (id<buildSvc>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_create_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
create_args * args = [[create_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Create_result * result = [[Create_result alloc] init];
[result setSuccess: [mService create: [args account]]];
[outProtocol writeMessageBeginWithName: @"create"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
login_args * args = [[login_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Login_result * result = [[Login_result alloc] init];
[result setSuccess: [mService login: [args account]]];
[outProtocol writeMessageBeginWithName: @"login"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMenu_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getMenu_args * args = [[getMenu_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetMenu_result * result = [[GetMenu_result alloc] init];
[result setSuccess: [mService getMenu: [args seq_no]]];
[outProtocol writeMessageBeginWithName: @"getMenu"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_findBuilds_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
findBuilds_args * args = [[findBuilds_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
FindBuilds_result * result = [[FindBuilds_result alloc] init];
[result setSuccess: [mService findBuilds: [args build] page: [args page]]];
[outProtocol writeMessageBeginWithName: @"findBuilds"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_findComments_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
findComments_args * args = [[findComments_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
FindComments_result * result = [[FindComments_result alloc] init];
[result setSuccess: [mService findComments: [args comment] page: [args page]]];
[outProtocol writeMessageBeginWithName: @"findComments"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_findNotices_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
findNotices_args * args = [[findNotices_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
FindNotices_result * result = [[FindNotices_result alloc] init];
[result setSuccess: [mService findNotices: [args notice] page: [args page]]];
[outProtocol writeMessageBeginWithName: @"findNotices"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_findSorts_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
findSorts_args * args = [[findSorts_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
FindSorts_result * result = [[FindSorts_result alloc] init];
[result setSuccess: [mService findSorts: [args sort] page: [args page]]];
[outProtocol writeMessageBeginWithName: @"findSorts"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_findPics_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
findPics_args * args = [[findPics_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
FindPics_result * result = [[FindPics_result alloc] init];
[result setSuccess: [mService findPics: [args pic] page: [args page]]];
[outProtocol writeMessageBeginWithName: @"findPics"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_findAccounts_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
findAccounts_args * args = [[findAccounts_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
FindAccounts_result * result = [[FindAccounts_result alloc] init];
[result setSuccess: [mService findAccounts: [args account] page: [args page]]];
[outProtocol writeMessageBeginWithName: @"findAccounts"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@implementation buildSvcClientAsync

- (id) initWithProtocolFactory: (id <TProtocolFactory>) factory transport: (id <TAsyncTransport>) transport;
{
self = [super init];
inProtocol = [[factory newProtocolOnTransport:transport] retain_stub];
outProtocol = inProtocol;
asyncTransport = transport;
return self;
}

- (void) send_create: (Account *) account
{
[outProtocol writeMessageBeginWithName: @"create" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"create_args"];
if (account != nil){
  [outProtocol writeFieldBeginWithName: @"account" type: TType_STRUCT fieldID: 1];
  [account write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
}

- (Account *) recv_create
{
TApplicationException * x = [self checkIncomingMessageException];
if (x != nil){
  @throw x;
}
Create_result * result = [[[Create_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"create failed: unknown result"];
}

- (void) create: (Account *) account response: (void (^)(Account *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
@try {
  [self send_create : account];
} @catch(TException * texception) {
  failureBlock(texception);
  return;
}
[asyncTransport flush:^{
  @try {
    responseBlock([self recv_create]);
  } @catch(TException * texception) {
    failureBlock(texception);
  }
} failure:failureBlock];
}

- (void) send_login: (Account *) account
{
[outProtocol writeMessageBeginWithName: @"login" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"login_args"];
if (account != nil){
  [outProtocol writeFieldBeginWithName: @"account" type: TType_STRUCT fieldID: 1];
  [account write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
}

- (Account *) recv_login
{
TApplicationException * x = [self checkIncomingMessageException];
if (x != nil){
  @throw x;
}
Login_result * result = [[[Login_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"login failed: unknown result"];
}

- (void) login: (Account *) account response: (void (^)(Account *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
@try {
  [self send_login : account];
} @catch(TException * texception) {
  failureBlock(texception);
  return;
}
[asyncTransport flush:^{
  @try {
    responseBlock([self recv_login]);
  } @catch(TException * texception) {
    failureBlock(texception);
  }
} failure:failureBlock];
}

- (void) send_getMenu: (NSString *) seq_no
{
[outProtocol writeMessageBeginWithName: @"getMenu" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getMenu_args"];
if (seq_no != nil){
  [outProtocol writeFieldBeginWithName: @"seq_no" type: TType_STRING fieldID: 1];
  [outProtocol writeString: seq_no];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
}

- (MenuList *) recv_getMenu
{
TApplicationException * x = [self checkIncomingMessageException];
if (x != nil){
  @throw x;
}
GetMenu_result * result = [[[GetMenu_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getMenu failed: unknown result"];
}

- (void) getMenu: (NSString *) seq_no response: (void (^)(MenuList *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
@try {
  [self send_getMenu : seq_no];
} @catch(TException * texception) {
  failureBlock(texception);
  return;
}
[asyncTransport flush:^{
  @try {
    responseBlock([self recv_getMenu]);
  } @catch(TException * texception) {
    failureBlock(texception);
  }
} failure:failureBlock];
}

- (void) send_findBuilds: (Build *) build page: (Page *) page
{
[outProtocol writeMessageBeginWithName: @"findBuilds" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"findBuilds_args"];
if (build != nil){
  [outProtocol writeFieldBeginWithName: @"build" type: TType_STRUCT fieldID: 1];
  [build write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (page != nil){
  [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
  [page write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
}

- (BuildList *) recv_findBuilds
{
TApplicationException * x = [self checkIncomingMessageException];
if (x != nil){
  @throw x;
}
FindBuilds_result * result = [[[FindBuilds_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"findBuilds failed: unknown result"];
}

- (void) findBuilds: (Build *) build page: (Page *) page response: (void (^)(BuildList *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
@try {
  [self send_findBuilds : build page: page];
} @catch(TException * texception) {
  failureBlock(texception);
  return;
}
[asyncTransport flush:^{
  @try {
    responseBlock([self recv_findBuilds]);
  } @catch(TException * texception) {
    failureBlock(texception);
  }
} failure:failureBlock];
}

- (void) send_findComments: (Comment *) comment page: (Page *) page
{
[outProtocol writeMessageBeginWithName: @"findComments" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"findComments_args"];
if (comment != nil){
  [outProtocol writeFieldBeginWithName: @"comment" type: TType_STRUCT fieldID: 1];
  [comment write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (page != nil){
  [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
  [page write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
}

- (CommentList *) recv_findComments
{
TApplicationException * x = [self checkIncomingMessageException];
if (x != nil){
  @throw x;
}
FindComments_result * result = [[[FindComments_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"findComments failed: unknown result"];
}

- (void) findComments: (Comment *) comment page: (Page *) page response: (void (^)(CommentList *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
@try {
  [self send_findComments : comment page: page];
} @catch(TException * texception) {
  failureBlock(texception);
  return;
}
[asyncTransport flush:^{
  @try {
    responseBlock([self recv_findComments]);
  } @catch(TException * texception) {
    failureBlock(texception);
  }
} failure:failureBlock];
}

- (void) send_findNotices: (Notice *) notice page: (Page *) page
{
[outProtocol writeMessageBeginWithName: @"findNotices" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"findNotices_args"];
if (notice != nil){
  [outProtocol writeFieldBeginWithName: @"notice" type: TType_STRUCT fieldID: 1];
  [notice write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (page != nil){
  [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
  [page write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
}

- (NoticeList *) recv_findNotices
{
TApplicationException * x = [self checkIncomingMessageException];
if (x != nil){
  @throw x;
}
FindNotices_result * result = [[[FindNotices_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"findNotices failed: unknown result"];
}

- (void) findNotices: (Notice *) notice page: (Page *) page response: (void (^)(NoticeList *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
@try {
  [self send_findNotices : notice page: page];
} @catch(TException * texception) {
  failureBlock(texception);
  return;
}
[asyncTransport flush:^{
  @try {
    responseBlock([self recv_findNotices]);
  } @catch(TException * texception) {
    failureBlock(texception);
  }
} failure:failureBlock];
}

- (void) send_findSorts: (Sort *) sort page: (Page *) page
{
[outProtocol writeMessageBeginWithName: @"findSorts" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"findSorts_args"];
if (sort != nil){
  [outProtocol writeFieldBeginWithName: @"sort" type: TType_STRUCT fieldID: 1];
  [sort write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (page != nil){
  [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
  [page write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
}

- (SortList *) recv_findSorts
{
TApplicationException * x = [self checkIncomingMessageException];
if (x != nil){
  @throw x;
}
FindSorts_result * result = [[[FindSorts_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"findSorts failed: unknown result"];
}

- (void) findSorts: (Sort *) sort page: (Page *) page response: (void (^)(SortList *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
@try {
  [self send_findSorts : sort page: page];
} @catch(TException * texception) {
  failureBlock(texception);
  return;
}
[asyncTransport flush:^{
  @try {
    responseBlock([self recv_findSorts]);
  } @catch(TException * texception) {
    failureBlock(texception);
  }
} failure:failureBlock];
}

- (void) send_findPics: (Pic *) pic page: (Page *) page
{
[outProtocol writeMessageBeginWithName: @"findPics" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"findPics_args"];
if (pic != nil){
  [outProtocol writeFieldBeginWithName: @"pic" type: TType_STRUCT fieldID: 1];
  [pic write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (page != nil){
  [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
  [page write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
}

- (PicList *) recv_findPics
{
TApplicationException * x = [self checkIncomingMessageException];
if (x != nil){
  @throw x;
}
FindPics_result * result = [[[FindPics_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"findPics failed: unknown result"];
}

- (void) findPics: (Pic *) pic page: (Page *) page response: (void (^)(PicList *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
@try {
  [self send_findPics : pic page: page];
} @catch(TException * texception) {
  failureBlock(texception);
  return;
}
[asyncTransport flush:^{
  @try {
    responseBlock([self recv_findPics]);
  } @catch(TException * texception) {
    failureBlock(texception);
  }
} failure:failureBlock];
}

- (void) send_findAccounts: (Account *) account page: (Page *) page
{
[outProtocol writeMessageBeginWithName: @"findAccounts" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"findAccounts_args"];
if (account != nil){
  [outProtocol writeFieldBeginWithName: @"account" type: TType_STRUCT fieldID: 1];
  [account write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (page != nil){
  [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
  [page write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
}

- (AccountList *) recv_findAccounts
{
TApplicationException * x = [self checkIncomingMessageException];
if (x != nil){
  @throw x;
}
FindAccounts_result * result = [[[FindAccounts_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"findAccounts failed: unknown result"];
}

- (void) findAccounts: (Account *) account page: (Page *) page response: (void (^)(AccountList *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
@try {
  [self send_findAccounts : account page: page];
} @catch(TException * texception) {
  failureBlock(texception);
  return;
}
[asyncTransport flush:^{
  @try {
    responseBlock([self recv_findAccounts]);
  } @catch(TException * texception) {
    failureBlock(texception);
  }
} failure:failureBlock];
}

@end

