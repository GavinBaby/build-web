/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "common.h"

#import "auth.h"

@implementation Account

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id mobile: (NSString *) mobile password: (NSString *) password username: (NSString *) username state: (NSString *) state type: (NSString *) type regTime: (NSString *) regTime regIp: (NSString *) regIp thisLoginTime: (NSString *) thisLoginTime thisLoginIp: (NSString *) thisLoginIp lastLoginTime: (NSString *) lastLoginTime lastLoginIp: (NSString *) lastLoginIp back: (Back *) back
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __mobile = [mobile retain_stub];
  __mobile_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  __state = [state retain_stub];
  __state_isset = YES;
  __type = [type retain_stub];
  __type_isset = YES;
  __regTime = [regTime retain_stub];
  __regTime_isset = YES;
  __regIp = [regIp retain_stub];
  __regIp_isset = YES;
  __thisLoginTime = [thisLoginTime retain_stub];
  __thisLoginTime_isset = YES;
  __thisLoginIp = [thisLoginIp retain_stub];
  __thisLoginIp_isset = YES;
  __lastLoginTime = [lastLoginTime retain_stub];
  __lastLoginTime_isset = YES;
  __lastLoginIp = [lastLoginIp retain_stub];
  __lastLoginIp_isset = YES;
  __back = [back retain_stub];
  __back_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [[decoder decodeObjectForKey: @"mobile"] retain_stub];
    __mobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [[decoder decodeObjectForKey: @"state"] retain_stub];
    __state_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"regTime"])
  {
    __regTime = [[decoder decodeObjectForKey: @"regTime"] retain_stub];
    __regTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"regIp"])
  {
    __regIp = [[decoder decodeObjectForKey: @"regIp"] retain_stub];
    __regIp_isset = YES;
  }
  if ([decoder containsValueForKey: @"thisLoginTime"])
  {
    __thisLoginTime = [[decoder decodeObjectForKey: @"thisLoginTime"] retain_stub];
    __thisLoginTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"thisLoginIp"])
  {
    __thisLoginIp = [[decoder decodeObjectForKey: @"thisLoginIp"] retain_stub];
    __thisLoginIp_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastLoginTime"])
  {
    __lastLoginTime = [[decoder decodeObjectForKey: @"lastLoginTime"] retain_stub];
    __lastLoginTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastLoginIp"])
  {
    __lastLoginIp = [[decoder decodeObjectForKey: @"lastLoginIp"] retain_stub];
    __lastLoginIp_isset = YES;
  }
  if ([decoder containsValueForKey: @"back"])
  {
    __back = [[decoder decodeObjectForKey: @"back"] retain_stub];
    __back_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__mobile_isset)
  {
    [encoder encodeObject: __mobile forKey: @"mobile"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__state_isset)
  {
    [encoder encodeObject: __state forKey: @"state"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__regTime_isset)
  {
    [encoder encodeObject: __regTime forKey: @"regTime"];
  }
  if (__regIp_isset)
  {
    [encoder encodeObject: __regIp forKey: @"regIp"];
  }
  if (__thisLoginTime_isset)
  {
    [encoder encodeObject: __thisLoginTime forKey: @"thisLoginTime"];
  }
  if (__thisLoginIp_isset)
  {
    [encoder encodeObject: __thisLoginIp forKey: @"thisLoginIp"];
  }
  if (__lastLoginTime_isset)
  {
    [encoder encodeObject: __lastLoginTime forKey: @"lastLoginTime"];
  }
  if (__lastLoginIp_isset)
  {
    [encoder encodeObject: __lastLoginIp forKey: @"lastLoginIp"];
  }
  if (__back_isset)
  {
    [encoder encodeObject: __back forKey: @"back"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __mobile_isset ? 2654435761 : 0;
  if (__mobile_isset)
  {
    hash = (hash * 31) ^ [__mobile hash];
  }
  hash = (hash * 31) ^ __password_isset ? 2654435761 : 0;
  if (__password_isset)
  {
    hash = (hash * 31) ^ [__password hash];
  }
  hash = (hash * 31) ^ __username_isset ? 2654435761 : 0;
  if (__username_isset)
  {
    hash = (hash * 31) ^ [__username hash];
  }
  hash = (hash * 31) ^ __state_isset ? 2654435761 : 0;
  if (__state_isset)
  {
    hash = (hash * 31) ^ [__state hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [__type hash];
  }
  hash = (hash * 31) ^ __regTime_isset ? 2654435761 : 0;
  if (__regTime_isset)
  {
    hash = (hash * 31) ^ [__regTime hash];
  }
  hash = (hash * 31) ^ __regIp_isset ? 2654435761 : 0;
  if (__regIp_isset)
  {
    hash = (hash * 31) ^ [__regIp hash];
  }
  hash = (hash * 31) ^ __thisLoginTime_isset ? 2654435761 : 0;
  if (__thisLoginTime_isset)
  {
    hash = (hash * 31) ^ [__thisLoginTime hash];
  }
  hash = (hash * 31) ^ __thisLoginIp_isset ? 2654435761 : 0;
  if (__thisLoginIp_isset)
  {
    hash = (hash * 31) ^ [__thisLoginIp hash];
  }
  hash = (hash * 31) ^ __lastLoginTime_isset ? 2654435761 : 0;
  if (__lastLoginTime_isset)
  {
    hash = (hash * 31) ^ [__lastLoginTime hash];
  }
  hash = (hash * 31) ^ __lastLoginIp_isset ? 2654435761 : 0;
  if (__lastLoginIp_isset)
  {
    hash = (hash * 31) ^ [__lastLoginIp hash];
  }
  hash = (hash * 31) ^ __back_isset ? 2654435761 : 0;
  if (__back_isset)
  {
    hash = (hash * 31) ^ [__back hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Account class]]) {
    return NO;
  }
  Account *other = (Account *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__mobile_isset != other->__mobile_isset) ||
      (__mobile_isset && ((__mobile || other->__mobile) && ![__mobile isEqual:other->__mobile]))) {
    return NO;
  }
  if ((__password_isset != other->__password_isset) ||
      (__password_isset && ((__password || other->__password) && ![__password isEqual:other->__password]))) {
    return NO;
  }
  if ((__username_isset != other->__username_isset) ||
      (__username_isset && ((__username || other->__username) && ![__username isEqual:other->__username]))) {
    return NO;
  }
  if ((__state_isset != other->__state_isset) ||
      (__state_isset && ((__state || other->__state) && ![__state isEqual:other->__state]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && ((__type || other->__type) && ![__type isEqual:other->__type]))) {
    return NO;
  }
  if ((__regTime_isset != other->__regTime_isset) ||
      (__regTime_isset && ((__regTime || other->__regTime) && ![__regTime isEqual:other->__regTime]))) {
    return NO;
  }
  if ((__regIp_isset != other->__regIp_isset) ||
      (__regIp_isset && ((__regIp || other->__regIp) && ![__regIp isEqual:other->__regIp]))) {
    return NO;
  }
  if ((__thisLoginTime_isset != other->__thisLoginTime_isset) ||
      (__thisLoginTime_isset && ((__thisLoginTime || other->__thisLoginTime) && ![__thisLoginTime isEqual:other->__thisLoginTime]))) {
    return NO;
  }
  if ((__thisLoginIp_isset != other->__thisLoginIp_isset) ||
      (__thisLoginIp_isset && ((__thisLoginIp || other->__thisLoginIp) && ![__thisLoginIp isEqual:other->__thisLoginIp]))) {
    return NO;
  }
  if ((__lastLoginTime_isset != other->__lastLoginTime_isset) ||
      (__lastLoginTime_isset && ((__lastLoginTime || other->__lastLoginTime) && ![__lastLoginTime isEqual:other->__lastLoginTime]))) {
    return NO;
  }
  if ((__lastLoginIp_isset != other->__lastLoginIp_isset) ||
      (__lastLoginIp_isset && ((__lastLoginIp || other->__lastLoginIp) && ![__lastLoginIp isEqual:other->__lastLoginIp]))) {
    return NO;
  }
  if ((__back_isset != other->__back_isset) ||
      (__back_isset && ((__back || other->__back) && ![__back isEqual:other->__back]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__mobile release_stub];
  [__password release_stub];
  [__username release_stub];
  [__state release_stub];
  [__type release_stub];
  [__regTime release_stub];
  [__regIp release_stub];
  [__thisLoginTime release_stub];
  [__thisLoginIp release_stub];
  [__lastLoginTime release_stub];
  [__lastLoginIp release_stub];
  [__back release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) mobile {
  return [[__mobile retain_stub] autorelease_stub];
}

- (void) setMobile: (NSString *) mobile {
  [mobile retain_stub];
  [__mobile release_stub];
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  [__mobile release_stub];
  __mobile = nil;
  __mobile_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) state {
  return [[__state retain_stub] autorelease_stub];
}

- (void) setState: (NSString *) state {
  [state retain_stub];
  [__state release_stub];
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  [__state release_stub];
  __state = nil;
  __state_isset = NO;
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (NSString *) regTime {
  return [[__regTime retain_stub] autorelease_stub];
}

- (void) setRegTime: (NSString *) regTime {
  [regTime retain_stub];
  [__regTime release_stub];
  __regTime = regTime;
  __regTime_isset = YES;
}

- (BOOL) regTimeIsSet {
  return __regTime_isset;
}

- (void) unsetRegTime {
  [__regTime release_stub];
  __regTime = nil;
  __regTime_isset = NO;
}

- (NSString *) regIp {
  return [[__regIp retain_stub] autorelease_stub];
}

- (void) setRegIp: (NSString *) regIp {
  [regIp retain_stub];
  [__regIp release_stub];
  __regIp = regIp;
  __regIp_isset = YES;
}

- (BOOL) regIpIsSet {
  return __regIp_isset;
}

- (void) unsetRegIp {
  [__regIp release_stub];
  __regIp = nil;
  __regIp_isset = NO;
}

- (NSString *) thisLoginTime {
  return [[__thisLoginTime retain_stub] autorelease_stub];
}

- (void) setThisLoginTime: (NSString *) thisLoginTime {
  [thisLoginTime retain_stub];
  [__thisLoginTime release_stub];
  __thisLoginTime = thisLoginTime;
  __thisLoginTime_isset = YES;
}

- (BOOL) thisLoginTimeIsSet {
  return __thisLoginTime_isset;
}

- (void) unsetThisLoginTime {
  [__thisLoginTime release_stub];
  __thisLoginTime = nil;
  __thisLoginTime_isset = NO;
}

- (NSString *) thisLoginIp {
  return [[__thisLoginIp retain_stub] autorelease_stub];
}

- (void) setThisLoginIp: (NSString *) thisLoginIp {
  [thisLoginIp retain_stub];
  [__thisLoginIp release_stub];
  __thisLoginIp = thisLoginIp;
  __thisLoginIp_isset = YES;
}

- (BOOL) thisLoginIpIsSet {
  return __thisLoginIp_isset;
}

- (void) unsetThisLoginIp {
  [__thisLoginIp release_stub];
  __thisLoginIp = nil;
  __thisLoginIp_isset = NO;
}

- (NSString *) lastLoginTime {
  return [[__lastLoginTime retain_stub] autorelease_stub];
}

- (void) setLastLoginTime: (NSString *) lastLoginTime {
  [lastLoginTime retain_stub];
  [__lastLoginTime release_stub];
  __lastLoginTime = lastLoginTime;
  __lastLoginTime_isset = YES;
}

- (BOOL) lastLoginTimeIsSet {
  return __lastLoginTime_isset;
}

- (void) unsetLastLoginTime {
  [__lastLoginTime release_stub];
  __lastLoginTime = nil;
  __lastLoginTime_isset = NO;
}

- (NSString *) lastLoginIp {
  return [[__lastLoginIp retain_stub] autorelease_stub];
}

- (void) setLastLoginIp: (NSString *) lastLoginIp {
  [lastLoginIp retain_stub];
  [__lastLoginIp release_stub];
  __lastLoginIp = lastLoginIp;
  __lastLoginIp_isset = YES;
}

- (BOOL) lastLoginIpIsSet {
  return __lastLoginIp_isset;
}

- (void) unsetLastLoginIp {
  [__lastLoginIp release_stub];
  __lastLoginIp = nil;
  __lastLoginIp_isset = NO;
}

- (Back *) back {
  return [[__back retain_stub] autorelease_stub];
}

- (void) setBack: (Back *) back {
  [back retain_stub];
  [__back release_stub];
  __back = back;
  __back_isset = YES;
}

- (BOOL) backIsSet {
  return __back_isset;
}

- (void) unsetBack {
  [__back release_stub];
  __back = nil;
  __back_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegIp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setThisLoginTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setThisLoginIp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastLoginTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastLoginIp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRUCT) {
          Back *fieldValue = [[Back alloc] init];
          [fieldValue read: inProtocol];
          [self setBack: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Account"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobile_isset) {
    if (__mobile != nil) {
      [outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __mobile];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__state_isset) {
    if (__state != nil) {
      [outProtocol writeFieldBeginWithName: @"state" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __state];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regTime_isset) {
    if (__regTime != nil) {
      [outProtocol writeFieldBeginWithName: @"regTime" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __regTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regIp_isset) {
    if (__regIp != nil) {
      [outProtocol writeFieldBeginWithName: @"regIp" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __regIp];
      [outProtocol writeFieldEnd];
    }
  }
  if (__thisLoginTime_isset) {
    if (__thisLoginTime != nil) {
      [outProtocol writeFieldBeginWithName: @"thisLoginTime" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __thisLoginTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__thisLoginIp_isset) {
    if (__thisLoginIp != nil) {
      [outProtocol writeFieldBeginWithName: @"thisLoginIp" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __thisLoginIp];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastLoginTime_isset) {
    if (__lastLoginTime != nil) {
      [outProtocol writeFieldBeginWithName: @"lastLoginTime" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __lastLoginTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastLoginIp_isset) {
    if (__lastLoginIp != nil) {
      [outProtocol writeFieldBeginWithName: @"lastLoginIp" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __lastLoginIp];
      [outProtocol writeFieldEnd];
    }
  }
  if (__back_isset) {
    if (__back != nil) {
      [outProtocol writeFieldBeginWithName: @"back" type: TType_STRUCT fieldID: 13];
      [__back write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Account("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",mobile:"];
  [ms appendFormat: @"\"%@\"", __mobile];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",state:"];
  [ms appendFormat: @"\"%@\"", __state];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",regTime:"];
  [ms appendFormat: @"\"%@\"", __regTime];
  [ms appendString: @",regIp:"];
  [ms appendFormat: @"\"%@\"", __regIp];
  [ms appendString: @",thisLoginTime:"];
  [ms appendFormat: @"\"%@\"", __thisLoginTime];
  [ms appendString: @",thisLoginIp:"];
  [ms appendFormat: @"\"%@\"", __thisLoginIp];
  [ms appendString: @",lastLoginTime:"];
  [ms appendFormat: @"\"%@\"", __lastLoginTime];
  [ms appendString: @",lastLoginIp:"];
  [ms appendFormat: @"\"%@\"", __lastLoginIp];
  [ms appendString: @",back:"];
  [ms appendFormat: @"%@", __back];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AccountList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithData: (NSMutableArray *) data totalSize: (int32_t) totalSize
{
  self = [super init];
  __data = [data retain_stub];
  __data_isset = YES;
  __totalSize = totalSize;
  __totalSize_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalSize"])
  {
    __totalSize = [decoder decodeInt32ForKey: @"totalSize"];
    __totalSize_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
  if (__totalSize_isset)
  {
    [encoder encodeInt32: __totalSize forKey: @"totalSize"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  hash = (hash * 31) ^ __totalSize_isset ? 2654435761 : 0;
  if (__totalSize_isset)
  {
    hash = (hash * 31) ^ [@(__totalSize) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AccountList class]]) {
    return NO;
  }
  AccountList *other = (AccountList *)anObject;
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  if ((__totalSize_isset != other->__totalSize_isset) ||
      (__totalSize_isset && (__totalSize != other->__totalSize))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableArray *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (int32_t) totalSize {
  return __totalSize;
}

- (void) setTotalSize: (int32_t) totalSize {
  __totalSize = totalSize;
  __totalSize_isset = YES;
}

- (BOOL) totalSizeIsSet {
  return __totalSize_isset;
}

- (void) unsetTotalSize {
  __totalSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            Account *_elem2 = [[Account alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotalSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AccountList"];
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__data count]];
        int idx4;
        for (idx4 = 0; idx4 < [__data count]; idx4++)
        {
          [[__data objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalSize_isset) {
    [outProtocol writeFieldBeginWithName: @"totalSize" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __totalSize];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AccountList("];
  [ms appendString: @"data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @",totalSize:"];
  [ms appendFormat: @"%i", __totalSize];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Menu

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id pid: (NSString *) pid name: (NSString *) name link: (NSString *) link
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __pid = [pid retain_stub];
  __pid_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __link = [link retain_stub];
  __link_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"pid"])
  {
    __pid = [[decoder decodeObjectForKey: @"pid"] retain_stub];
    __pid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"link"])
  {
    __link = [[decoder decodeObjectForKey: @"link"] retain_stub];
    __link_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__pid_isset)
  {
    [encoder encodeObject: __pid forKey: @"pid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__link_isset)
  {
    [encoder encodeObject: __link forKey: @"link"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __pid_isset ? 2654435761 : 0;
  if (__pid_isset)
  {
    hash = (hash * 31) ^ [__pid hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __link_isset ? 2654435761 : 0;
  if (__link_isset)
  {
    hash = (hash * 31) ^ [__link hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Menu class]]) {
    return NO;
  }
  Menu *other = (Menu *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__pid_isset != other->__pid_isset) ||
      (__pid_isset && ((__pid || other->__pid) && ![__pid isEqual:other->__pid]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__link_isset != other->__link_isset) ||
      (__link_isset && ((__link || other->__link) && ![__link isEqual:other->__link]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__pid release_stub];
  [__name release_stub];
  [__link release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) pid {
  return [[__pid retain_stub] autorelease_stub];
}

- (void) setPid: (NSString *) pid {
  [pid retain_stub];
  [__pid release_stub];
  __pid = pid;
  __pid_isset = YES;
}

- (BOOL) pidIsSet {
  return __pid_isset;
}

- (void) unsetPid {
  [__pid release_stub];
  __pid = nil;
  __pid_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) link {
  return [[__link retain_stub] autorelease_stub];
}

- (void) setLink: (NSString *) link {
  [link retain_stub];
  [__link release_stub];
  __link = link;
  __link_isset = YES;
}

- (BOOL) linkIsSet {
  return __link_isset;
}

- (void) unsetLink {
  [__link release_stub];
  __link = nil;
  __link_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Menu"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pid_isset) {
    if (__pid != nil) {
      [outProtocol writeFieldBeginWithName: @"pid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__link_isset) {
    if (__link != nil) {
      [outProtocol writeFieldBeginWithName: @"link" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __link];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Menu("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",pid:"];
  [ms appendFormat: @"\"%@\"", __pid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",link:"];
  [ms appendFormat: @"\"%@\"", __link];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MenuList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBack: (Back *) back menu: (NSMutableArray *) menu
{
  self = [super init];
  __back = [back retain_stub];
  __back_isset = YES;
  __menu = [menu retain_stub];
  __menu_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"back"])
  {
    __back = [[decoder decodeObjectForKey: @"back"] retain_stub];
    __back_isset = YES;
  }
  if ([decoder containsValueForKey: @"menu"])
  {
    __menu = [[decoder decodeObjectForKey: @"menu"] retain_stub];
    __menu_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__back_isset)
  {
    [encoder encodeObject: __back forKey: @"back"];
  }
  if (__menu_isset)
  {
    [encoder encodeObject: __menu forKey: @"menu"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __back_isset ? 2654435761 : 0;
  if (__back_isset)
  {
    hash = (hash * 31) ^ [__back hash];
  }
  hash = (hash * 31) ^ __menu_isset ? 2654435761 : 0;
  if (__menu_isset)
  {
    hash = (hash * 31) ^ [__menu hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[MenuList class]]) {
    return NO;
  }
  MenuList *other = (MenuList *)anObject;
  if ((__back_isset != other->__back_isset) ||
      (__back_isset && ((__back || other->__back) && ![__back isEqual:other->__back]))) {
    return NO;
  }
  if ((__menu_isset != other->__menu_isset) ||
      (__menu_isset && ((__menu || other->__menu) && ![__menu isEqual:other->__menu]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__back release_stub];
  [__menu release_stub];
  [super dealloc_stub];
}

- (Back *) back {
  return [[__back retain_stub] autorelease_stub];
}

- (void) setBack: (Back *) back {
  [back retain_stub];
  [__back release_stub];
  __back = back;
  __back_isset = YES;
}

- (BOOL) backIsSet {
  return __back_isset;
}

- (void) unsetBack {
  [__back release_stub];
  __back = nil;
  __back_isset = NO;
}

- (NSMutableArray *) menu {
  return [[__menu retain_stub] autorelease_stub];
}

- (void) setMenu: (NSMutableArray *) menu {
  [menu retain_stub];
  [__menu release_stub];
  __menu = menu;
  __menu_isset = YES;
}

- (BOOL) menuIsSet {
  return __menu_isset;
}

- (void) unsetMenu {
  [__menu release_stub];
  __menu = nil;
  __menu_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Back *fieldValue = [[Back alloc] init];
          [fieldValue read: inProtocol];
          [self setBack: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            Menu *_elem7 = [[Menu alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setMenu: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MenuList"];
  if (__back_isset) {
    if (__back != nil) {
      [outProtocol writeFieldBeginWithName: @"back" type: TType_STRUCT fieldID: 1];
      [__back write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__menu_isset) {
    if (__menu != nil) {
      [outProtocol writeFieldBeginWithName: @"menu" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__menu count]];
        int idx9;
        for (idx9 = 0; idx9 < [__menu count]; idx9++)
        {
          [[__menu objectAtIndex: idx9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MenuList("];
  [ms appendString: @"back:"];
  [ms appendFormat: @"%@", __back];
  [ms appendString: @",menu:"];
  [ms appendFormat: @"%@", __menu];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation authConstants
+ (void) initialize {
}
@end

