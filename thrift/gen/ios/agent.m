/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "common.h"

#import "agent.h"

@implementation AccountResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithState: (Back *) state account: (Account *) account
{
  self = [super init];
  __state = [state retain_stub];
  __state_isset = YES;
  __account = [account retain_stub];
  __account_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [[decoder decodeObjectForKey: @"state"] retain_stub];
    __state_isset = YES;
  }
  if ([decoder containsValueForKey: @"account"])
  {
    __account = [[decoder decodeObjectForKey: @"account"] retain_stub];
    __account_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__state_isset)
  {
    [encoder encodeObject: __state forKey: @"state"];
  }
  if (__account_isset)
  {
    [encoder encodeObject: __account forKey: @"account"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __state_isset ? 2654435761 : 0;
  if (__state_isset)
  {
    hash = (hash * 31) ^ [__state hash];
  }
  hash = (hash * 31) ^ __account_isset ? 2654435761 : 0;
  if (__account_isset)
  {
    hash = (hash * 31) ^ [__account hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AccountResult class]]) {
    return NO;
  }
  AccountResult *other = (AccountResult *)anObject;
  if ((__state_isset != other->__state_isset) ||
      (__state_isset && ((__state || other->__state) && ![__state isEqual:other->__state]))) {
    return NO;
  }
  if ((__account_isset != other->__account_isset) ||
      (__account_isset && ((__account || other->__account) && ![__account isEqual:other->__account]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__state release_stub];
  [__account release_stub];
  [super dealloc_stub];
}

- (Back *) state {
  return [[__state retain_stub] autorelease_stub];
}

- (void) setState: (Back *) state {
  [state retain_stub];
  [__state release_stub];
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  [__state release_stub];
  __state = nil;
  __state_isset = NO;
}

- (Account *) account {
  return [[__account retain_stub] autorelease_stub];
}

- (void) setAccount: (Account *) account {
  [account retain_stub];
  [__account release_stub];
  __account = account;
  __account_isset = YES;
}

- (BOOL) accountIsSet {
  return __account_isset;
}

- (void) unsetAccount {
  [__account release_stub];
  __account = nil;
  __account_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Back *fieldValue = [[Back alloc] init];
          [fieldValue read: inProtocol];
          [self setState: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Account *fieldValue = [[Account alloc] init];
          [fieldValue read: inProtocol];
          [self setAccount: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AccountResult"];
  if (__state_isset) {
    if (__state != nil) {
      [outProtocol writeFieldBeginWithName: @"state" type: TType_STRUCT fieldID: 1];
      [__state write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__account_isset) {
    if (__account != nil) {
      [outProtocol writeFieldBeginWithName: @"account" type: TType_STRUCT fieldID: 2];
      [__account write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AccountResult("];
  [ms appendString: @"state:"];
  [ms appendFormat: @"%@", __state];
  [ms appendString: @",account:"];
  [ms appendFormat: @"%@", __account];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetMenuData

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id pid: (NSString *) pid name: (NSString *) name link: (NSString *) link
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __pid = [pid retain_stub];
  __pid_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __link = [link retain_stub];
  __link_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"pid"])
  {
    __pid = [[decoder decodeObjectForKey: @"pid"] retain_stub];
    __pid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"link"])
  {
    __link = [[decoder decodeObjectForKey: @"link"] retain_stub];
    __link_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__pid_isset)
  {
    [encoder encodeObject: __pid forKey: @"pid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__link_isset)
  {
    [encoder encodeObject: __link forKey: @"link"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __pid_isset ? 2654435761 : 0;
  if (__pid_isset)
  {
    hash = (hash * 31) ^ [__pid hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __link_isset ? 2654435761 : 0;
  if (__link_isset)
  {
    hash = (hash * 31) ^ [__link hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetMenuData class]]) {
    return NO;
  }
  GetMenuData *other = (GetMenuData *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__pid_isset != other->__pid_isset) ||
      (__pid_isset && ((__pid || other->__pid) && ![__pid isEqual:other->__pid]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__link_isset != other->__link_isset) ||
      (__link_isset && ((__link || other->__link) && ![__link isEqual:other->__link]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__pid release_stub];
  [__name release_stub];
  [__link release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) pid {
  return [[__pid retain_stub] autorelease_stub];
}

- (void) setPid: (NSString *) pid {
  [pid retain_stub];
  [__pid release_stub];
  __pid = pid;
  __pid_isset = YES;
}

- (BOOL) pidIsSet {
  return __pid_isset;
}

- (void) unsetPid {
  [__pid release_stub];
  __pid = nil;
  __pid_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) link {
  return [[__link retain_stub] autorelease_stub];
}

- (void) setLink: (NSString *) link {
  [link retain_stub];
  [__link release_stub];
  __link = link;
  __link_isset = YES;
}

- (BOOL) linkIsSet {
  return __link_isset;
}

- (void) unsetLink {
  [__link release_stub];
  __link = nil;
  __link_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMenuData"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pid_isset) {
    if (__pid != nil) {
      [outProtocol writeFieldBeginWithName: @"pid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__link_isset) {
    if (__link != nil) {
      [outProtocol writeFieldBeginWithName: @"link" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __link];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMenuData("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",pid:"];
  [ms appendFormat: @"\"%@\"", __pid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",link:"];
  [ms appendFormat: @"\"%@\"", __link];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MenuList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithState: (Back *) state menu: (NSMutableArray *) menu
{
  self = [super init];
  __state = [state retain_stub];
  __state_isset = YES;
  __menu = [menu retain_stub];
  __menu_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [[decoder decodeObjectForKey: @"state"] retain_stub];
    __state_isset = YES;
  }
  if ([decoder containsValueForKey: @"menu"])
  {
    __menu = [[decoder decodeObjectForKey: @"menu"] retain_stub];
    __menu_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__state_isset)
  {
    [encoder encodeObject: __state forKey: @"state"];
  }
  if (__menu_isset)
  {
    [encoder encodeObject: __menu forKey: @"menu"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __state_isset ? 2654435761 : 0;
  if (__state_isset)
  {
    hash = (hash * 31) ^ [__state hash];
  }
  hash = (hash * 31) ^ __menu_isset ? 2654435761 : 0;
  if (__menu_isset)
  {
    hash = (hash * 31) ^ [__menu hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[MenuList class]]) {
    return NO;
  }
  MenuList *other = (MenuList *)anObject;
  if ((__state_isset != other->__state_isset) ||
      (__state_isset && ((__state || other->__state) && ![__state isEqual:other->__state]))) {
    return NO;
  }
  if ((__menu_isset != other->__menu_isset) ||
      (__menu_isset && ((__menu || other->__menu) && ![__menu isEqual:other->__menu]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__state release_stub];
  [__menu release_stub];
  [super dealloc_stub];
}

- (Back *) state {
  return [[__state retain_stub] autorelease_stub];
}

- (void) setState: (Back *) state {
  [state retain_stub];
  [__state release_stub];
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  [__state release_stub];
  __state = nil;
  __state_isset = NO;
}

- (NSMutableArray *) menu {
  return [[__menu retain_stub] autorelease_stub];
}

- (void) setMenu: (NSMutableArray *) menu {
  [menu retain_stub];
  [__menu release_stub];
  __menu = menu;
  __menu_isset = YES;
}

- (BOOL) menuIsSet {
  return __menu_isset;
}

- (void) unsetMenu {
  [__menu release_stub];
  __menu = nil;
  __menu_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Back *fieldValue = [[Back alloc] init];
          [fieldValue read: inProtocol];
          [self setState: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            GetMenuData *_elem2 = [[GetMenuData alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setMenu: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MenuList"];
  if (__state_isset) {
    if (__state != nil) {
      [outProtocol writeFieldBeginWithName: @"state" type: TType_STRUCT fieldID: 1];
      [__state write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__menu_isset) {
    if (__menu != nil) {
      [outProtocol writeFieldBeginWithName: @"menu" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__menu count]];
        int idx4;
        for (idx4 = 0; idx4 < [__menu count]; idx4++)
        {
          [[__menu objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MenuList("];
  [ms appendString: @"state:"];
  [ms appendFormat: @"%@", __state];
  [ms appendString: @",menu:"];
  [ms appendFormat: @"%@", __menu];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation agentConstants
+ (void) initialize {
}
@end

