/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 账户信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-11")
public class Account implements org.apache.thrift.TBase<Account, Account._Fields>, java.io.Serializable, Cloneable, Comparable<Account> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Account");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REG_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("regTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REG_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("regIp", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField THIS_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("thisLoginTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField THIS_LOGIN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("thisLoginIp", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginIp", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BACK_FIELD_DESC = new org.apache.thrift.protocol.TField("back", org.apache.thrift.protocol.TType.STRUCT, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AccountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AccountTupleSchemeFactory());
  }

  /**
   * id
   */
  public String id; // required
  /**
   * 手机号
   */
  public String mobile; // required
  /**
   * 登录密码
   */
  public String password; // required
  /**
   * 用户名
   */
  public String username; // required
  /**
   * 帐户状态
   */
  public String state; // required
  /**
   * 账号类型
   */
  public String type; // required
  /**
   * 注册时间
   */
  public String regTime; // required
  /**
   * 注册ip
   */
  public String regIp; // required
  /**
   * 本次登录时间
   */
  public String thisLoginTime; // required
  /**
   * 本次登录ip
   */
  public String thisLoginIp; // required
  /**
   * 上次登录时间
   */
  public String lastLoginTime; // required
  /**
   * 上次登录ip
   */
  public String lastLoginIp; // required
  public Back back; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * id
     */
    ID((short)1, "id"),
    /**
     * 手机号
     */
    MOBILE((short)2, "mobile"),
    /**
     * 登录密码
     */
    PASSWORD((short)3, "password"),
    /**
     * 用户名
     */
    USERNAME((short)4, "username"),
    /**
     * 帐户状态
     */
    STATE((short)5, "state"),
    /**
     * 账号类型
     */
    TYPE((short)6, "type"),
    /**
     * 注册时间
     */
    REG_TIME((short)7, "regTime"),
    /**
     * 注册ip
     */
    REG_IP((short)8, "regIp"),
    /**
     * 本次登录时间
     */
    THIS_LOGIN_TIME((short)9, "thisLoginTime"),
    /**
     * 本次登录ip
     */
    THIS_LOGIN_IP((short)10, "thisLoginIp"),
    /**
     * 上次登录时间
     */
    LAST_LOGIN_TIME((short)11, "lastLoginTime"),
    /**
     * 上次登录ip
     */
    LAST_LOGIN_IP((short)12, "lastLoginIp"),
    BACK((short)13, "back");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MOBILE
          return MOBILE;
        case 3: // PASSWORD
          return PASSWORD;
        case 4: // USERNAME
          return USERNAME;
        case 5: // STATE
          return STATE;
        case 6: // TYPE
          return TYPE;
        case 7: // REG_TIME
          return REG_TIME;
        case 8: // REG_IP
          return REG_IP;
        case 9: // THIS_LOGIN_TIME
          return THIS_LOGIN_TIME;
        case 10: // THIS_LOGIN_IP
          return THIS_LOGIN_IP;
        case 11: // LAST_LOGIN_TIME
          return LAST_LOGIN_TIME;
        case 12: // LAST_LOGIN_IP
          return LAST_LOGIN_IP;
        case 13: // BACK
          return BACK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_TIME, new org.apache.thrift.meta_data.FieldMetaData("regTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_IP, new org.apache.thrift.meta_data.FieldMetaData("regIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIS_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("thisLoginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIS_LOGIN_IP, new org.apache.thrift.meta_data.FieldMetaData("thisLoginIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastLoginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_IP, new org.apache.thrift.meta_data.FieldMetaData("lastLoginIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BACK, new org.apache.thrift.meta_data.FieldMetaData("back", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Back.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Account.class, metaDataMap);
  }

  public Account() {
  }

  public Account(
    String id,
    String mobile,
    String password,
    String username,
    String state,
    String type,
    String regTime,
    String regIp,
    String thisLoginTime,
    String thisLoginIp,
    String lastLoginTime,
    String lastLoginIp,
    Back back)
  {
    this();
    this.id = id;
    this.mobile = mobile;
    this.password = password;
    this.username = username;
    this.state = state;
    this.type = type;
    this.regTime = regTime;
    this.regIp = regIp;
    this.thisLoginTime = thisLoginTime;
    this.thisLoginIp = thisLoginIp;
    this.lastLoginTime = lastLoginTime;
    this.lastLoginIp = lastLoginIp;
    this.back = back;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Account(Account other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetRegTime()) {
      this.regTime = other.regTime;
    }
    if (other.isSetRegIp()) {
      this.regIp = other.regIp;
    }
    if (other.isSetThisLoginTime()) {
      this.thisLoginTime = other.thisLoginTime;
    }
    if (other.isSetThisLoginIp()) {
      this.thisLoginIp = other.thisLoginIp;
    }
    if (other.isSetLastLoginTime()) {
      this.lastLoginTime = other.lastLoginTime;
    }
    if (other.isSetLastLoginIp()) {
      this.lastLoginIp = other.lastLoginIp;
    }
    if (other.isSetBack()) {
      this.back = new Back(other.back);
    }
  }

  public Account deepCopy() {
    return new Account(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.mobile = null;
    this.password = null;
    this.username = null;
    this.state = null;
    this.type = null;
    this.regTime = null;
    this.regIp = null;
    this.thisLoginTime = null;
    this.thisLoginIp = null;
    this.lastLoginTime = null;
    this.lastLoginIp = null;
    this.back = null;
  }

  /**
   * id
   */
  public String getId() {
    return this.id;
  }

  /**
   * id
   */
  public Account setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 手机号
   */
  public String getMobile() {
    return this.mobile;
  }

  /**
   * 手机号
   */
  public Account setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  /**
   * 登录密码
   */
  public String getPassword() {
    return this.password;
  }

  /**
   * 登录密码
   */
  public Account setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  /**
   * 用户名
   */
  public String getUsername() {
    return this.username;
  }

  /**
   * 用户名
   */
  public Account setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  /**
   * 帐户状态
   */
  public String getState() {
    return this.state;
  }

  /**
   * 帐户状态
   */
  public Account setState(String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  /**
   * 账号类型
   */
  public String getType() {
    return this.type;
  }

  /**
   * 账号类型
   */
  public Account setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 注册时间
   */
  public String getRegTime() {
    return this.regTime;
  }

  /**
   * 注册时间
   */
  public Account setRegTime(String regTime) {
    this.regTime = regTime;
    return this;
  }

  public void unsetRegTime() {
    this.regTime = null;
  }

  /** Returns true if field regTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRegTime() {
    return this.regTime != null;
  }

  public void setRegTimeIsSet(boolean value) {
    if (!value) {
      this.regTime = null;
    }
  }

  /**
   * 注册ip
   */
  public String getRegIp() {
    return this.regIp;
  }

  /**
   * 注册ip
   */
  public Account setRegIp(String regIp) {
    this.regIp = regIp;
    return this;
  }

  public void unsetRegIp() {
    this.regIp = null;
  }

  /** Returns true if field regIp is set (has been assigned a value) and false otherwise */
  public boolean isSetRegIp() {
    return this.regIp != null;
  }

  public void setRegIpIsSet(boolean value) {
    if (!value) {
      this.regIp = null;
    }
  }

  /**
   * 本次登录时间
   */
  public String getThisLoginTime() {
    return this.thisLoginTime;
  }

  /**
   * 本次登录时间
   */
  public Account setThisLoginTime(String thisLoginTime) {
    this.thisLoginTime = thisLoginTime;
    return this;
  }

  public void unsetThisLoginTime() {
    this.thisLoginTime = null;
  }

  /** Returns true if field thisLoginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetThisLoginTime() {
    return this.thisLoginTime != null;
  }

  public void setThisLoginTimeIsSet(boolean value) {
    if (!value) {
      this.thisLoginTime = null;
    }
  }

  /**
   * 本次登录ip
   */
  public String getThisLoginIp() {
    return this.thisLoginIp;
  }

  /**
   * 本次登录ip
   */
  public Account setThisLoginIp(String thisLoginIp) {
    this.thisLoginIp = thisLoginIp;
    return this;
  }

  public void unsetThisLoginIp() {
    this.thisLoginIp = null;
  }

  /** Returns true if field thisLoginIp is set (has been assigned a value) and false otherwise */
  public boolean isSetThisLoginIp() {
    return this.thisLoginIp != null;
  }

  public void setThisLoginIpIsSet(boolean value) {
    if (!value) {
      this.thisLoginIp = null;
    }
  }

  /**
   * 上次登录时间
   */
  public String getLastLoginTime() {
    return this.lastLoginTime;
  }

  /**
   * 上次登录时间
   */
  public Account setLastLoginTime(String lastLoginTime) {
    this.lastLoginTime = lastLoginTime;
    return this;
  }

  public void unsetLastLoginTime() {
    this.lastLoginTime = null;
  }

  /** Returns true if field lastLoginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginTime() {
    return this.lastLoginTime != null;
  }

  public void setLastLoginTimeIsSet(boolean value) {
    if (!value) {
      this.lastLoginTime = null;
    }
  }

  /**
   * 上次登录ip
   */
  public String getLastLoginIp() {
    return this.lastLoginIp;
  }

  /**
   * 上次登录ip
   */
  public Account setLastLoginIp(String lastLoginIp) {
    this.lastLoginIp = lastLoginIp;
    return this;
  }

  public void unsetLastLoginIp() {
    this.lastLoginIp = null;
  }

  /** Returns true if field lastLoginIp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginIp() {
    return this.lastLoginIp != null;
  }

  public void setLastLoginIpIsSet(boolean value) {
    if (!value) {
      this.lastLoginIp = null;
    }
  }

  public Back getBack() {
    return this.back;
  }

  public Account setBack(Back back) {
    this.back = back;
    return this;
  }

  public void unsetBack() {
    this.back = null;
  }

  /** Returns true if field back is set (has been assigned a value) and false otherwise */
  public boolean isSetBack() {
    return this.back != null;
  }

  public void setBackIsSet(boolean value) {
    if (!value) {
      this.back = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case REG_TIME:
      if (value == null) {
        unsetRegTime();
      } else {
        setRegTime((String)value);
      }
      break;

    case REG_IP:
      if (value == null) {
        unsetRegIp();
      } else {
        setRegIp((String)value);
      }
      break;

    case THIS_LOGIN_TIME:
      if (value == null) {
        unsetThisLoginTime();
      } else {
        setThisLoginTime((String)value);
      }
      break;

    case THIS_LOGIN_IP:
      if (value == null) {
        unsetThisLoginIp();
      } else {
        setThisLoginIp((String)value);
      }
      break;

    case LAST_LOGIN_TIME:
      if (value == null) {
        unsetLastLoginTime();
      } else {
        setLastLoginTime((String)value);
      }
      break;

    case LAST_LOGIN_IP:
      if (value == null) {
        unsetLastLoginIp();
      } else {
        setLastLoginIp((String)value);
      }
      break;

    case BACK:
      if (value == null) {
        unsetBack();
      } else {
        setBack((Back)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case MOBILE:
      return getMobile();

    case PASSWORD:
      return getPassword();

    case USERNAME:
      return getUsername();

    case STATE:
      return getState();

    case TYPE:
      return getType();

    case REG_TIME:
      return getRegTime();

    case REG_IP:
      return getRegIp();

    case THIS_LOGIN_TIME:
      return getThisLoginTime();

    case THIS_LOGIN_IP:
      return getThisLoginIp();

    case LAST_LOGIN_TIME:
      return getLastLoginTime();

    case LAST_LOGIN_IP:
      return getLastLoginIp();

    case BACK:
      return getBack();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MOBILE:
      return isSetMobile();
    case PASSWORD:
      return isSetPassword();
    case USERNAME:
      return isSetUsername();
    case STATE:
      return isSetState();
    case TYPE:
      return isSetType();
    case REG_TIME:
      return isSetRegTime();
    case REG_IP:
      return isSetRegIp();
    case THIS_LOGIN_TIME:
      return isSetThisLoginTime();
    case THIS_LOGIN_IP:
      return isSetThisLoginIp();
    case LAST_LOGIN_TIME:
      return isSetLastLoginTime();
    case LAST_LOGIN_IP:
      return isSetLastLoginIp();
    case BACK:
      return isSetBack();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Account)
      return this.equals((Account)that);
    return false;
  }

  public boolean equals(Account that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_regTime = true && this.isSetRegTime();
    boolean that_present_regTime = true && that.isSetRegTime();
    if (this_present_regTime || that_present_regTime) {
      if (!(this_present_regTime && that_present_regTime))
        return false;
      if (!this.regTime.equals(that.regTime))
        return false;
    }

    boolean this_present_regIp = true && this.isSetRegIp();
    boolean that_present_regIp = true && that.isSetRegIp();
    if (this_present_regIp || that_present_regIp) {
      if (!(this_present_regIp && that_present_regIp))
        return false;
      if (!this.regIp.equals(that.regIp))
        return false;
    }

    boolean this_present_thisLoginTime = true && this.isSetThisLoginTime();
    boolean that_present_thisLoginTime = true && that.isSetThisLoginTime();
    if (this_present_thisLoginTime || that_present_thisLoginTime) {
      if (!(this_present_thisLoginTime && that_present_thisLoginTime))
        return false;
      if (!this.thisLoginTime.equals(that.thisLoginTime))
        return false;
    }

    boolean this_present_thisLoginIp = true && this.isSetThisLoginIp();
    boolean that_present_thisLoginIp = true && that.isSetThisLoginIp();
    if (this_present_thisLoginIp || that_present_thisLoginIp) {
      if (!(this_present_thisLoginIp && that_present_thisLoginIp))
        return false;
      if (!this.thisLoginIp.equals(that.thisLoginIp))
        return false;
    }

    boolean this_present_lastLoginTime = true && this.isSetLastLoginTime();
    boolean that_present_lastLoginTime = true && that.isSetLastLoginTime();
    if (this_present_lastLoginTime || that_present_lastLoginTime) {
      if (!(this_present_lastLoginTime && that_present_lastLoginTime))
        return false;
      if (!this.lastLoginTime.equals(that.lastLoginTime))
        return false;
    }

    boolean this_present_lastLoginIp = true && this.isSetLastLoginIp();
    boolean that_present_lastLoginIp = true && that.isSetLastLoginIp();
    if (this_present_lastLoginIp || that_present_lastLoginIp) {
      if (!(this_present_lastLoginIp && that_present_lastLoginIp))
        return false;
      if (!this.lastLoginIp.equals(that.lastLoginIp))
        return false;
    }

    boolean this_present_back = true && this.isSetBack();
    boolean that_present_back = true && that.isSetBack();
    if (this_present_back || that_present_back) {
      if (!(this_present_back && that_present_back))
        return false;
      if (!this.back.equals(that.back))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_password = true && (isSetPassword());
    list.add(present_password);
    if (present_password)
      list.add(password);

    boolean present_username = true && (isSetUsername());
    list.add(present_username);
    if (present_username)
      list.add(username);

    boolean present_state = true && (isSetState());
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_regTime = true && (isSetRegTime());
    list.add(present_regTime);
    if (present_regTime)
      list.add(regTime);

    boolean present_regIp = true && (isSetRegIp());
    list.add(present_regIp);
    if (present_regIp)
      list.add(regIp);

    boolean present_thisLoginTime = true && (isSetThisLoginTime());
    list.add(present_thisLoginTime);
    if (present_thisLoginTime)
      list.add(thisLoginTime);

    boolean present_thisLoginIp = true && (isSetThisLoginIp());
    list.add(present_thisLoginIp);
    if (present_thisLoginIp)
      list.add(thisLoginIp);

    boolean present_lastLoginTime = true && (isSetLastLoginTime());
    list.add(present_lastLoginTime);
    if (present_lastLoginTime)
      list.add(lastLoginTime);

    boolean present_lastLoginIp = true && (isSetLastLoginIp());
    list.add(present_lastLoginIp);
    if (present_lastLoginIp)
      list.add(lastLoginIp);

    boolean present_back = true && (isSetBack());
    list.add(present_back);
    if (present_back)
      list.add(back);

    return list.hashCode();
  }

  @Override
  public int compareTo(Account other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegTime()).compareTo(other.isSetRegTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regTime, other.regTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegIp()).compareTo(other.isSetRegIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regIp, other.regIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThisLoginTime()).compareTo(other.isSetThisLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThisLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thisLoginTime, other.thisLoginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThisLoginIp()).compareTo(other.isSetThisLoginIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThisLoginIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thisLoginIp, other.thisLoginIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLoginTime()).compareTo(other.isSetLastLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginTime, other.lastLoginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLoginIp()).compareTo(other.isSetLastLoginIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginIp, other.lastLoginIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBack()).compareTo(other.isSetBack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.back, other.back);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Account(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regTime:");
    if (this.regTime == null) {
      sb.append("null");
    } else {
      sb.append(this.regTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regIp:");
    if (this.regIp == null) {
      sb.append("null");
    } else {
      sb.append(this.regIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thisLoginTime:");
    if (this.thisLoginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.thisLoginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thisLoginIp:");
    if (this.thisLoginIp == null) {
      sb.append("null");
    } else {
      sb.append(this.thisLoginIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLoginTime:");
    if (this.lastLoginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastLoginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLoginIp:");
    if (this.lastLoginIp == null) {
      sb.append("null");
    } else {
      sb.append(this.lastLoginIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("back:");
    if (this.back == null) {
      sb.append("null");
    } else {
      sb.append(this.back);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (back != null) {
      back.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccountStandardSchemeFactory implements SchemeFactory {
    public AccountStandardScheme getScheme() {
      return new AccountStandardScheme();
    }
  }

  private static class AccountStandardScheme extends StandardScheme<Account> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Account struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REG_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regTime = iprot.readString();
              struct.setRegTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REG_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regIp = iprot.readString();
              struct.setRegIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // THIS_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thisLoginTime = iprot.readString();
              struct.setThisLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // THIS_LOGIN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thisLoginIp = iprot.readString();
              struct.setThisLoginIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLoginTime = iprot.readString();
              struct.setLastLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LAST_LOGIN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLoginIp = iprot.readString();
              struct.setLastLoginIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.back = new Back();
              struct.back.read(iprot);
              struct.setBackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Account struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeString(struct.state);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.regTime != null) {
        oprot.writeFieldBegin(REG_TIME_FIELD_DESC);
        oprot.writeString(struct.regTime);
        oprot.writeFieldEnd();
      }
      if (struct.regIp != null) {
        oprot.writeFieldBegin(REG_IP_FIELD_DESC);
        oprot.writeString(struct.regIp);
        oprot.writeFieldEnd();
      }
      if (struct.thisLoginTime != null) {
        oprot.writeFieldBegin(THIS_LOGIN_TIME_FIELD_DESC);
        oprot.writeString(struct.thisLoginTime);
        oprot.writeFieldEnd();
      }
      if (struct.thisLoginIp != null) {
        oprot.writeFieldBegin(THIS_LOGIN_IP_FIELD_DESC);
        oprot.writeString(struct.thisLoginIp);
        oprot.writeFieldEnd();
      }
      if (struct.lastLoginTime != null) {
        oprot.writeFieldBegin(LAST_LOGIN_TIME_FIELD_DESC);
        oprot.writeString(struct.lastLoginTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastLoginIp != null) {
        oprot.writeFieldBegin(LAST_LOGIN_IP_FIELD_DESC);
        oprot.writeString(struct.lastLoginIp);
        oprot.writeFieldEnd();
      }
      if (struct.back != null) {
        oprot.writeFieldBegin(BACK_FIELD_DESC);
        struct.back.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccountTupleSchemeFactory implements SchemeFactory {
    public AccountTupleScheme getScheme() {
      return new AccountTupleScheme();
    }
  }

  private static class AccountTupleScheme extends TupleScheme<Account> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Account struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMobile()) {
        optionals.set(1);
      }
      if (struct.isSetPassword()) {
        optionals.set(2);
      }
      if (struct.isSetUsername()) {
        optionals.set(3);
      }
      if (struct.isSetState()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetRegTime()) {
        optionals.set(6);
      }
      if (struct.isSetRegIp()) {
        optionals.set(7);
      }
      if (struct.isSetThisLoginTime()) {
        optionals.set(8);
      }
      if (struct.isSetThisLoginIp()) {
        optionals.set(9);
      }
      if (struct.isSetLastLoginTime()) {
        optionals.set(10);
      }
      if (struct.isSetLastLoginIp()) {
        optionals.set(11);
      }
      if (struct.isSetBack()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetRegTime()) {
        oprot.writeString(struct.regTime);
      }
      if (struct.isSetRegIp()) {
        oprot.writeString(struct.regIp);
      }
      if (struct.isSetThisLoginTime()) {
        oprot.writeString(struct.thisLoginTime);
      }
      if (struct.isSetThisLoginIp()) {
        oprot.writeString(struct.thisLoginIp);
      }
      if (struct.isSetLastLoginTime()) {
        oprot.writeString(struct.lastLoginTime);
      }
      if (struct.isSetLastLoginIp()) {
        oprot.writeString(struct.lastLoginIp);
      }
      if (struct.isSetBack()) {
        struct.back.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Account struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(2)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.regTime = iprot.readString();
        struct.setRegTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.regIp = iprot.readString();
        struct.setRegIpIsSet(true);
      }
      if (incoming.get(8)) {
        struct.thisLoginTime = iprot.readString();
        struct.setThisLoginTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.thisLoginIp = iprot.readString();
        struct.setThisLoginIpIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastLoginTime = iprot.readString();
        struct.setLastLoginTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.lastLoginIp = iprot.readString();
        struct.setLastLoginIpIsSet(true);
      }
      if (incoming.get(12)) {
        struct.back = new Back();
        struct.back.read(iprot);
        struct.setBackIsSet(true);
      }
    }
  }

}

