/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-24")
public class Notice implements org.apache.thrift.TBase<Notice, Notice._Fields>, java.io.Serializable, Cloneable, Comparable<Notice> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Notice");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PUBLIC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("public_time", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HREF_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("href_name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField HREF_FIELD_DESC = new org.apache.thrift.protocol.TField("href", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField START_T_FIELD_DESC = new org.apache.thrift.protocol.TField("start_t", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField END_T_FIELD_DESC = new org.apache.thrift.protocol.TField("end_t", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BACK_FIELD_DESC = new org.apache.thrift.protocol.TField("back", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("details", org.apache.thrift.protocol.TType.LIST, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NoticeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NoticeTupleSchemeFactory());
  }

  public String id; // required
  public String title; // required
  public String type; // required
  public String source; // required
  public String public_time; // required
  public String href_name; // required
  public String href; // required
  public String url; // required
  public String start_t; // required
  public String end_t; // required
  public String address; // required
  public String state; // required
  public Back back; // required
  public List<NoticeDetail> details; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    TYPE((short)3, "type"),
    SOURCE((short)4, "source"),
    PUBLIC_TIME((short)5, "public_time"),
    HREF_NAME((short)6, "href_name"),
    HREF((short)7, "href"),
    URL((short)8, "url"),
    START_T((short)9, "start_t"),
    END_T((short)10, "end_t"),
    ADDRESS((short)11, "address"),
    STATE((short)12, "state"),
    BACK((short)13, "back"),
    DETAILS((short)14, "details");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // TYPE
          return TYPE;
        case 4: // SOURCE
          return SOURCE;
        case 5: // PUBLIC_TIME
          return PUBLIC_TIME;
        case 6: // HREF_NAME
          return HREF_NAME;
        case 7: // HREF
          return HREF;
        case 8: // URL
          return URL;
        case 9: // START_T
          return START_T;
        case 10: // END_T
          return END_T;
        case 11: // ADDRESS
          return ADDRESS;
        case 12: // STATE
          return STATE;
        case 13: // BACK
          return BACK;
        case 14: // DETAILS
          return DETAILS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLIC_TIME, new org.apache.thrift.meta_data.FieldMetaData("public_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HREF_NAME, new org.apache.thrift.meta_data.FieldMetaData("href_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HREF, new org.apache.thrift.meta_data.FieldMetaData("href", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_T, new org.apache.thrift.meta_data.FieldMetaData("start_t", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_T, new org.apache.thrift.meta_data.FieldMetaData("end_t", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BACK, new org.apache.thrift.meta_data.FieldMetaData("back", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Back.class)));
    tmpMap.put(_Fields.DETAILS, new org.apache.thrift.meta_data.FieldMetaData("details", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoticeDetail.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Notice.class, metaDataMap);
  }

  public Notice() {
  }

  public Notice(
    String id,
    String title,
    String type,
    String source,
    String public_time,
    String href_name,
    String href,
    String url,
    String start_t,
    String end_t,
    String address,
    String state,
    Back back,
    List<NoticeDetail> details)
  {
    this();
    this.id = id;
    this.title = title;
    this.type = type;
    this.source = source;
    this.public_time = public_time;
    this.href_name = href_name;
    this.href = href;
    this.url = url;
    this.start_t = start_t;
    this.end_t = end_t;
    this.address = address;
    this.state = state;
    this.back = back;
    this.details = details;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Notice(Notice other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetPublic_time()) {
      this.public_time = other.public_time;
    }
    if (other.isSetHref_name()) {
      this.href_name = other.href_name;
    }
    if (other.isSetHref()) {
      this.href = other.href;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetStart_t()) {
      this.start_t = other.start_t;
    }
    if (other.isSetEnd_t()) {
      this.end_t = other.end_t;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetBack()) {
      this.back = new Back(other.back);
    }
    if (other.isSetDetails()) {
      List<NoticeDetail> __this__details = new ArrayList<NoticeDetail>(other.details.size());
      for (NoticeDetail other_element : other.details) {
        __this__details.add(new NoticeDetail(other_element));
      }
      this.details = __this__details;
    }
  }

  public Notice deepCopy() {
    return new Notice(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.title = null;
    this.type = null;
    this.source = null;
    this.public_time = null;
    this.href_name = null;
    this.href = null;
    this.url = null;
    this.start_t = null;
    this.end_t = null;
    this.address = null;
    this.state = null;
    this.back = null;
    this.details = null;
  }

  public String getId() {
    return this.id;
  }

  public Notice setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public Notice setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public Notice setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getSource() {
    return this.source;
  }

  public Notice setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public String getPublic_time() {
    return this.public_time;
  }

  public Notice setPublic_time(String public_time) {
    this.public_time = public_time;
    return this;
  }

  public void unsetPublic_time() {
    this.public_time = null;
  }

  /** Returns true if field public_time is set (has been assigned a value) and false otherwise */
  public boolean isSetPublic_time() {
    return this.public_time != null;
  }

  public void setPublic_timeIsSet(boolean value) {
    if (!value) {
      this.public_time = null;
    }
  }

  public String getHref_name() {
    return this.href_name;
  }

  public Notice setHref_name(String href_name) {
    this.href_name = href_name;
    return this;
  }

  public void unsetHref_name() {
    this.href_name = null;
  }

  /** Returns true if field href_name is set (has been assigned a value) and false otherwise */
  public boolean isSetHref_name() {
    return this.href_name != null;
  }

  public void setHref_nameIsSet(boolean value) {
    if (!value) {
      this.href_name = null;
    }
  }

  public String getHref() {
    return this.href;
  }

  public Notice setHref(String href) {
    this.href = href;
    return this;
  }

  public void unsetHref() {
    this.href = null;
  }

  /** Returns true if field href is set (has been assigned a value) and false otherwise */
  public boolean isSetHref() {
    return this.href != null;
  }

  public void setHrefIsSet(boolean value) {
    if (!value) {
      this.href = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public Notice setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getStart_t() {
    return this.start_t;
  }

  public Notice setStart_t(String start_t) {
    this.start_t = start_t;
    return this;
  }

  public void unsetStart_t() {
    this.start_t = null;
  }

  /** Returns true if field start_t is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_t() {
    return this.start_t != null;
  }

  public void setStart_tIsSet(boolean value) {
    if (!value) {
      this.start_t = null;
    }
  }

  public String getEnd_t() {
    return this.end_t;
  }

  public Notice setEnd_t(String end_t) {
    this.end_t = end_t;
    return this;
  }

  public void unsetEnd_t() {
    this.end_t = null;
  }

  /** Returns true if field end_t is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_t() {
    return this.end_t != null;
  }

  public void setEnd_tIsSet(boolean value) {
    if (!value) {
      this.end_t = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public Notice setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getState() {
    return this.state;
  }

  public Notice setState(String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public Back getBack() {
    return this.back;
  }

  public Notice setBack(Back back) {
    this.back = back;
    return this;
  }

  public void unsetBack() {
    this.back = null;
  }

  /** Returns true if field back is set (has been assigned a value) and false otherwise */
  public boolean isSetBack() {
    return this.back != null;
  }

  public void setBackIsSet(boolean value) {
    if (!value) {
      this.back = null;
    }
  }

  public int getDetailsSize() {
    return (this.details == null) ? 0 : this.details.size();
  }

  public java.util.Iterator<NoticeDetail> getDetailsIterator() {
    return (this.details == null) ? null : this.details.iterator();
  }

  public void addToDetails(NoticeDetail elem) {
    if (this.details == null) {
      this.details = new ArrayList<NoticeDetail>();
    }
    this.details.add(elem);
  }

  public List<NoticeDetail> getDetails() {
    return this.details;
  }

  public Notice setDetails(List<NoticeDetail> details) {
    this.details = details;
    return this;
  }

  public void unsetDetails() {
    this.details = null;
  }

  /** Returns true if field details is set (has been assigned a value) and false otherwise */
  public boolean isSetDetails() {
    return this.details != null;
  }

  public void setDetailsIsSet(boolean value) {
    if (!value) {
      this.details = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case PUBLIC_TIME:
      if (value == null) {
        unsetPublic_time();
      } else {
        setPublic_time((String)value);
      }
      break;

    case HREF_NAME:
      if (value == null) {
        unsetHref_name();
      } else {
        setHref_name((String)value);
      }
      break;

    case HREF:
      if (value == null) {
        unsetHref();
      } else {
        setHref((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case START_T:
      if (value == null) {
        unsetStart_t();
      } else {
        setStart_t((String)value);
      }
      break;

    case END_T:
      if (value == null) {
        unsetEnd_t();
      } else {
        setEnd_t((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((String)value);
      }
      break;

    case BACK:
      if (value == null) {
        unsetBack();
      } else {
        setBack((Back)value);
      }
      break;

    case DETAILS:
      if (value == null) {
        unsetDetails();
      } else {
        setDetails((List<NoticeDetail>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case TYPE:
      return getType();

    case SOURCE:
      return getSource();

    case PUBLIC_TIME:
      return getPublic_time();

    case HREF_NAME:
      return getHref_name();

    case HREF:
      return getHref();

    case URL:
      return getUrl();

    case START_T:
      return getStart_t();

    case END_T:
      return getEnd_t();

    case ADDRESS:
      return getAddress();

    case STATE:
      return getState();

    case BACK:
      return getBack();

    case DETAILS:
      return getDetails();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case TYPE:
      return isSetType();
    case SOURCE:
      return isSetSource();
    case PUBLIC_TIME:
      return isSetPublic_time();
    case HREF_NAME:
      return isSetHref_name();
    case HREF:
      return isSetHref();
    case URL:
      return isSetUrl();
    case START_T:
      return isSetStart_t();
    case END_T:
      return isSetEnd_t();
    case ADDRESS:
      return isSetAddress();
    case STATE:
      return isSetState();
    case BACK:
      return isSetBack();
    case DETAILS:
      return isSetDetails();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Notice)
      return this.equals((Notice)that);
    return false;
  }

  public boolean equals(Notice that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_public_time = true && this.isSetPublic_time();
    boolean that_present_public_time = true && that.isSetPublic_time();
    if (this_present_public_time || that_present_public_time) {
      if (!(this_present_public_time && that_present_public_time))
        return false;
      if (!this.public_time.equals(that.public_time))
        return false;
    }

    boolean this_present_href_name = true && this.isSetHref_name();
    boolean that_present_href_name = true && that.isSetHref_name();
    if (this_present_href_name || that_present_href_name) {
      if (!(this_present_href_name && that_present_href_name))
        return false;
      if (!this.href_name.equals(that.href_name))
        return false;
    }

    boolean this_present_href = true && this.isSetHref();
    boolean that_present_href = true && that.isSetHref();
    if (this_present_href || that_present_href) {
      if (!(this_present_href && that_present_href))
        return false;
      if (!this.href.equals(that.href))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_start_t = true && this.isSetStart_t();
    boolean that_present_start_t = true && that.isSetStart_t();
    if (this_present_start_t || that_present_start_t) {
      if (!(this_present_start_t && that_present_start_t))
        return false;
      if (!this.start_t.equals(that.start_t))
        return false;
    }

    boolean this_present_end_t = true && this.isSetEnd_t();
    boolean that_present_end_t = true && that.isSetEnd_t();
    if (this_present_end_t || that_present_end_t) {
      if (!(this_present_end_t && that_present_end_t))
        return false;
      if (!this.end_t.equals(that.end_t))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_back = true && this.isSetBack();
    boolean that_present_back = true && that.isSetBack();
    if (this_present_back || that_present_back) {
      if (!(this_present_back && that_present_back))
        return false;
      if (!this.back.equals(that.back))
        return false;
    }

    boolean this_present_details = true && this.isSetDetails();
    boolean that_present_details = true && that.isSetDetails();
    if (this_present_details || that_present_details) {
      if (!(this_present_details && that_present_details))
        return false;
      if (!this.details.equals(that.details))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_source = true && (isSetSource());
    list.add(present_source);
    if (present_source)
      list.add(source);

    boolean present_public_time = true && (isSetPublic_time());
    list.add(present_public_time);
    if (present_public_time)
      list.add(public_time);

    boolean present_href_name = true && (isSetHref_name());
    list.add(present_href_name);
    if (present_href_name)
      list.add(href_name);

    boolean present_href = true && (isSetHref());
    list.add(present_href);
    if (present_href)
      list.add(href);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_start_t = true && (isSetStart_t());
    list.add(present_start_t);
    if (present_start_t)
      list.add(start_t);

    boolean present_end_t = true && (isSetEnd_t());
    list.add(present_end_t);
    if (present_end_t)
      list.add(end_t);

    boolean present_address = true && (isSetAddress());
    list.add(present_address);
    if (present_address)
      list.add(address);

    boolean present_state = true && (isSetState());
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_back = true && (isSetBack());
    list.add(present_back);
    if (present_back)
      list.add(back);

    boolean present_details = true && (isSetDetails());
    list.add(present_details);
    if (present_details)
      list.add(details);

    return list.hashCode();
  }

  @Override
  public int compareTo(Notice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublic_time()).compareTo(other.isSetPublic_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublic_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.public_time, other.public_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHref_name()).compareTo(other.isSetHref_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHref_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.href_name, other.href_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHref()).compareTo(other.isSetHref());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHref()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.href, other.href);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_t()).compareTo(other.isSetStart_t());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_t()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_t, other.start_t);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_t()).compareTo(other.isSetEnd_t());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_t()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_t, other.end_t);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBack()).compareTo(other.isSetBack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.back, other.back);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetails()).compareTo(other.isSetDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.details, other.details);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Notice(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("public_time:");
    if (this.public_time == null) {
      sb.append("null");
    } else {
      sb.append(this.public_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("href_name:");
    if (this.href_name == null) {
      sb.append("null");
    } else {
      sb.append(this.href_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("href:");
    if (this.href == null) {
      sb.append("null");
    } else {
      sb.append(this.href);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_t:");
    if (this.start_t == null) {
      sb.append("null");
    } else {
      sb.append(this.start_t);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_t:");
    if (this.end_t == null) {
      sb.append("null");
    } else {
      sb.append(this.end_t);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("back:");
    if (this.back == null) {
      sb.append("null");
    } else {
      sb.append(this.back);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("details:");
    if (this.details == null) {
      sb.append("null");
    } else {
      sb.append(this.details);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (back != null) {
      back.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NoticeStandardSchemeFactory implements SchemeFactory {
    public NoticeStandardScheme getScheme() {
      return new NoticeStandardScheme();
    }
  }

  private static class NoticeStandardScheme extends StandardScheme<Notice> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Notice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PUBLIC_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.public_time = iprot.readString();
              struct.setPublic_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HREF_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.href_name = iprot.readString();
              struct.setHref_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HREF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.href = iprot.readString();
              struct.setHrefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // START_T
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.start_t = iprot.readString();
              struct.setStart_tIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // END_T
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.end_t = iprot.readString();
              struct.setEnd_tIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.back = new Back();
              struct.back.read(iprot);
              struct.setBackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.details = new ArrayList<NoticeDetail>(_list8.size);
                NoticeDetail _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new NoticeDetail();
                  _elem9.read(iprot);
                  struct.details.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Notice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.public_time != null) {
        oprot.writeFieldBegin(PUBLIC_TIME_FIELD_DESC);
        oprot.writeString(struct.public_time);
        oprot.writeFieldEnd();
      }
      if (struct.href_name != null) {
        oprot.writeFieldBegin(HREF_NAME_FIELD_DESC);
        oprot.writeString(struct.href_name);
        oprot.writeFieldEnd();
      }
      if (struct.href != null) {
        oprot.writeFieldBegin(HREF_FIELD_DESC);
        oprot.writeString(struct.href);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.start_t != null) {
        oprot.writeFieldBegin(START_T_FIELD_DESC);
        oprot.writeString(struct.start_t);
        oprot.writeFieldEnd();
      }
      if (struct.end_t != null) {
        oprot.writeFieldBegin(END_T_FIELD_DESC);
        oprot.writeString(struct.end_t);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeString(struct.state);
        oprot.writeFieldEnd();
      }
      if (struct.back != null) {
        oprot.writeFieldBegin(BACK_FIELD_DESC);
        struct.back.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.details != null) {
        oprot.writeFieldBegin(DETAILS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.details.size()));
          for (NoticeDetail _iter11 : struct.details)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NoticeTupleSchemeFactory implements SchemeFactory {
    public NoticeTupleScheme getScheme() {
      return new NoticeTupleScheme();
    }
  }

  private static class NoticeTupleScheme extends TupleScheme<Notice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Notice struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetSource()) {
        optionals.set(3);
      }
      if (struct.isSetPublic_time()) {
        optionals.set(4);
      }
      if (struct.isSetHref_name()) {
        optionals.set(5);
      }
      if (struct.isSetHref()) {
        optionals.set(6);
      }
      if (struct.isSetUrl()) {
        optionals.set(7);
      }
      if (struct.isSetStart_t()) {
        optionals.set(8);
      }
      if (struct.isSetEnd_t()) {
        optionals.set(9);
      }
      if (struct.isSetAddress()) {
        optionals.set(10);
      }
      if (struct.isSetState()) {
        optionals.set(11);
      }
      if (struct.isSetBack()) {
        optionals.set(12);
      }
      if (struct.isSetDetails()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetPublic_time()) {
        oprot.writeString(struct.public_time);
      }
      if (struct.isSetHref_name()) {
        oprot.writeString(struct.href_name);
      }
      if (struct.isSetHref()) {
        oprot.writeString(struct.href);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetStart_t()) {
        oprot.writeString(struct.start_t);
      }
      if (struct.isSetEnd_t()) {
        oprot.writeString(struct.end_t);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetBack()) {
        struct.back.write(oprot);
      }
      if (struct.isSetDetails()) {
        {
          oprot.writeI32(struct.details.size());
          for (NoticeDetail _iter12 : struct.details)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Notice struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.public_time = iprot.readString();
        struct.setPublic_timeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.href_name = iprot.readString();
        struct.setHref_nameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.href = iprot.readString();
        struct.setHrefIsSet(true);
      }
      if (incoming.get(7)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(8)) {
        struct.start_t = iprot.readString();
        struct.setStart_tIsSet(true);
      }
      if (incoming.get(9)) {
        struct.end_t = iprot.readString();
        struct.setEnd_tIsSet(true);
      }
      if (incoming.get(10)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(11)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.back = new Back();
        struct.back.read(iprot);
        struct.setBackIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.details = new ArrayList<NoticeDetail>(_list13.size);
          NoticeDetail _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new NoticeDetail();
            _elem14.read(iprot);
            struct.details.add(_elem14);
          }
        }
        struct.setDetailsIsSet(true);
      }
    }
  }

}

