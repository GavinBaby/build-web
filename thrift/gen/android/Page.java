/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-20")
public class Page implements org.apache.thrift.TBase<Page, Page._Fields>, java.io.Serializable, Cloneable, Comparable<Page> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Page");

  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RECORD_START_FIELD_DESC = new org.apache.thrift.protocol.TField("recordStart", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sortName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortType", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PageTupleSchemeFactory());
  }

  /**
   * 单页条数
   */
  public String pageSize; // required
  /**
   * 开始记录条数
   */
  public String recordStart; // required
  /**
   * 排序条件
   */
  public String sortName; // required
  /**
   * 排序方式
   */
  public String sortType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 单页条数
     */
    PAGE_SIZE((short)1, "pageSize"),
    /**
     * 开始记录条数
     */
    RECORD_START((short)2, "recordStart"),
    /**
     * 排序条件
     */
    SORT_NAME((short)3, "sortName"),
    /**
     * 排序方式
     */
    SORT_TYPE((short)4, "sortType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE_SIZE
          return PAGE_SIZE;
        case 2: // RECORD_START
          return RECORD_START;
        case 3: // SORT_NAME
          return SORT_NAME;
        case 4: // SORT_TYPE
          return SORT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD_START, new org.apache.thrift.meta_data.FieldMetaData("recordStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("sortName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sortType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Page.class, metaDataMap);
  }

  public Page() {
  }

  public Page(
    String pageSize,
    String recordStart,
    String sortName,
    String sortType)
  {
    this();
    this.pageSize = pageSize;
    this.recordStart = recordStart;
    this.sortName = sortName;
    this.sortType = sortType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Page(Page other) {
    if (other.isSetPageSize()) {
      this.pageSize = other.pageSize;
    }
    if (other.isSetRecordStart()) {
      this.recordStart = other.recordStart;
    }
    if (other.isSetSortName()) {
      this.sortName = other.sortName;
    }
    if (other.isSetSortType()) {
      this.sortType = other.sortType;
    }
  }

  public Page deepCopy() {
    return new Page(this);
  }

  @Override
  public void clear() {
    this.pageSize = null;
    this.recordStart = null;
    this.sortName = null;
    this.sortType = null;
  }

  /**
   * 单页条数
   */
  public String getPageSize() {
    return this.pageSize;
  }

  /**
   * 单页条数
   */
  public Page setPageSize(String pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  public void unsetPageSize() {
    this.pageSize = null;
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return this.pageSize != null;
  }

  public void setPageSizeIsSet(boolean value) {
    if (!value) {
      this.pageSize = null;
    }
  }

  /**
   * 开始记录条数
   */
  public String getRecordStart() {
    return this.recordStart;
  }

  /**
   * 开始记录条数
   */
  public Page setRecordStart(String recordStart) {
    this.recordStart = recordStart;
    return this;
  }

  public void unsetRecordStart() {
    this.recordStart = null;
  }

  /** Returns true if field recordStart is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordStart() {
    return this.recordStart != null;
  }

  public void setRecordStartIsSet(boolean value) {
    if (!value) {
      this.recordStart = null;
    }
  }

  /**
   * 排序条件
   */
  public String getSortName() {
    return this.sortName;
  }

  /**
   * 排序条件
   */
  public Page setSortName(String sortName) {
    this.sortName = sortName;
    return this;
  }

  public void unsetSortName() {
    this.sortName = null;
  }

  /** Returns true if field sortName is set (has been assigned a value) and false otherwise */
  public boolean isSetSortName() {
    return this.sortName != null;
  }

  public void setSortNameIsSet(boolean value) {
    if (!value) {
      this.sortName = null;
    }
  }

  /**
   * 排序方式
   */
  public String getSortType() {
    return this.sortType;
  }

  /**
   * 排序方式
   */
  public Page setSortType(String sortType) {
    this.sortType = sortType;
    return this;
  }

  public void unsetSortType() {
    this.sortType = null;
  }

  /** Returns true if field sortType is set (has been assigned a value) and false otherwise */
  public boolean isSetSortType() {
    return this.sortType != null;
  }

  public void setSortTypeIsSet(boolean value) {
    if (!value) {
      this.sortType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((String)value);
      }
      break;

    case RECORD_START:
      if (value == null) {
        unsetRecordStart();
      } else {
        setRecordStart((String)value);
      }
      break;

    case SORT_NAME:
      if (value == null) {
        unsetSortName();
      } else {
        setSortName((String)value);
      }
      break;

    case SORT_TYPE:
      if (value == null) {
        unsetSortType();
      } else {
        setSortType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE_SIZE:
      return getPageSize();

    case RECORD_START:
      return getRecordStart();

    case SORT_NAME:
      return getSortName();

    case SORT_TYPE:
      return getSortType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE_SIZE:
      return isSetPageSize();
    case RECORD_START:
      return isSetRecordStart();
    case SORT_NAME:
      return isSetSortName();
    case SORT_TYPE:
      return isSetSortType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Page)
      return this.equals((Page)that);
    return false;
  }

  public boolean equals(Page that) {
    if (that == null)
      return false;

    boolean this_present_pageSize = true && this.isSetPageSize();
    boolean that_present_pageSize = true && that.isSetPageSize();
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (!this.pageSize.equals(that.pageSize))
        return false;
    }

    boolean this_present_recordStart = true && this.isSetRecordStart();
    boolean that_present_recordStart = true && that.isSetRecordStart();
    if (this_present_recordStart || that_present_recordStart) {
      if (!(this_present_recordStart && that_present_recordStart))
        return false;
      if (!this.recordStart.equals(that.recordStart))
        return false;
    }

    boolean this_present_sortName = true && this.isSetSortName();
    boolean that_present_sortName = true && that.isSetSortName();
    if (this_present_sortName || that_present_sortName) {
      if (!(this_present_sortName && that_present_sortName))
        return false;
      if (!this.sortName.equals(that.sortName))
        return false;
    }

    boolean this_present_sortType = true && this.isSetSortType();
    boolean that_present_sortType = true && that.isSetSortType();
    if (this_present_sortType || that_present_sortType) {
      if (!(this_present_sortType && that_present_sortType))
        return false;
      if (!this.sortType.equals(that.sortType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pageSize = true && (isSetPageSize());
    list.add(present_pageSize);
    if (present_pageSize)
      list.add(pageSize);

    boolean present_recordStart = true && (isSetRecordStart());
    list.add(present_recordStart);
    if (present_recordStart)
      list.add(recordStart);

    boolean present_sortName = true && (isSetSortName());
    list.add(present_sortName);
    if (present_sortName)
      list.add(sortName);

    boolean present_sortType = true && (isSetSortType());
    list.add(present_sortType);
    if (present_sortType)
      list.add(sortType);

    return list.hashCode();
  }

  @Override
  public int compareTo(Page other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordStart()).compareTo(other.isSetRecordStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordStart, other.recordStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortName()).compareTo(other.isSetSortName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortName, other.sortName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortType()).compareTo(other.isSetSortType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortType, other.sortType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Page(");
    boolean first = true;

    sb.append("pageSize:");
    if (this.pageSize == null) {
      sb.append("null");
    } else {
      sb.append(this.pageSize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordStart:");
    if (this.recordStart == null) {
      sb.append("null");
    } else {
      sb.append(this.recordStart);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortName:");
    if (this.sortName == null) {
      sb.append("null");
    } else {
      sb.append(this.sortName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortType:");
    if (this.sortType == null) {
      sb.append("null");
    } else {
      sb.append(this.sortType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PageStandardSchemeFactory implements SchemeFactory {
    public PageStandardScheme getScheme() {
      return new PageStandardScheme();
    }
  }

  private static class PageStandardScheme extends StandardScheme<Page> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Page struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pageSize = iprot.readString();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECORD_START
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recordStart = iprot.readString();
              struct.setRecordStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SORT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortName = iprot.readString();
              struct.setSortNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortType = iprot.readString();
              struct.setSortTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Page struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pageSize != null) {
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeString(struct.pageSize);
        oprot.writeFieldEnd();
      }
      if (struct.recordStart != null) {
        oprot.writeFieldBegin(RECORD_START_FIELD_DESC);
        oprot.writeString(struct.recordStart);
        oprot.writeFieldEnd();
      }
      if (struct.sortName != null) {
        oprot.writeFieldBegin(SORT_NAME_FIELD_DESC);
        oprot.writeString(struct.sortName);
        oprot.writeFieldEnd();
      }
      if (struct.sortType != null) {
        oprot.writeFieldBegin(SORT_TYPE_FIELD_DESC);
        oprot.writeString(struct.sortType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PageTupleSchemeFactory implements SchemeFactory {
    public PageTupleScheme getScheme() {
      return new PageTupleScheme();
    }
  }

  private static class PageTupleScheme extends TupleScheme<Page> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Page struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPageSize()) {
        optionals.set(0);
      }
      if (struct.isSetRecordStart()) {
        optionals.set(1);
      }
      if (struct.isSetSortName()) {
        optionals.set(2);
      }
      if (struct.isSetSortType()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPageSize()) {
        oprot.writeString(struct.pageSize);
      }
      if (struct.isSetRecordStart()) {
        oprot.writeString(struct.recordStart);
      }
      if (struct.isSetSortName()) {
        oprot.writeString(struct.sortName);
      }
      if (struct.isSetSortType()) {
        oprot.writeString(struct.sortType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Page struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.pageSize = iprot.readString();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.recordStart = iprot.readString();
        struct.setRecordStartIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sortName = iprot.readString();
        struct.setSortNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sortType = iprot.readString();
        struct.setSortTypeIsSet(true);
      }
    }
  }

}

