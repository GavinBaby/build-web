//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types')


var ttypes = module.exports = {};
Account = module.exports.Account = function(args) {
  this.id = null;
  this.mobile = null;
  this.password = null;
  this.username = null;
  this.state = null;
  this.type = null;
  this.regTime = null;
  this.regIp = null;
  this.thisLoginTime = null;
  this.thisLoginIp = null;
  this.lastLoginTime = null;
  this.lastLoginIp = null;
  this.back = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.mobile !== undefined && args.mobile !== null) {
      this.mobile = args.mobile;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.regTime !== undefined && args.regTime !== null) {
      this.regTime = args.regTime;
    }
    if (args.regIp !== undefined && args.regIp !== null) {
      this.regIp = args.regIp;
    }
    if (args.thisLoginTime !== undefined && args.thisLoginTime !== null) {
      this.thisLoginTime = args.thisLoginTime;
    }
    if (args.thisLoginIp !== undefined && args.thisLoginIp !== null) {
      this.thisLoginIp = args.thisLoginIp;
    }
    if (args.lastLoginTime !== undefined && args.lastLoginTime !== null) {
      this.lastLoginTime = args.lastLoginTime;
    }
    if (args.lastLoginIp !== undefined && args.lastLoginIp !== null) {
      this.lastLoginIp = args.lastLoginIp;
    }
    if (args.back !== undefined && args.back !== null) {
      this.back = new common_ttypes.Back(args.back);
    }
  }
};
Account.prototype = {};
Account.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.regTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.regIp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.thisLoginTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.thisLoginIp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.lastLoginTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.lastLoginIp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.back = new common_ttypes.Back();
        this.back.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Account.prototype.write = function(output) {
  output.writeStructBegin('Account');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 2);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 4);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 5);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 6);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.regTime !== null && this.regTime !== undefined) {
    output.writeFieldBegin('regTime', Thrift.Type.STRING, 7);
    output.writeString(this.regTime);
    output.writeFieldEnd();
  }
  if (this.regIp !== null && this.regIp !== undefined) {
    output.writeFieldBegin('regIp', Thrift.Type.STRING, 8);
    output.writeString(this.regIp);
    output.writeFieldEnd();
  }
  if (this.thisLoginTime !== null && this.thisLoginTime !== undefined) {
    output.writeFieldBegin('thisLoginTime', Thrift.Type.STRING, 9);
    output.writeString(this.thisLoginTime);
    output.writeFieldEnd();
  }
  if (this.thisLoginIp !== null && this.thisLoginIp !== undefined) {
    output.writeFieldBegin('thisLoginIp', Thrift.Type.STRING, 10);
    output.writeString(this.thisLoginIp);
    output.writeFieldEnd();
  }
  if (this.lastLoginTime !== null && this.lastLoginTime !== undefined) {
    output.writeFieldBegin('lastLoginTime', Thrift.Type.STRING, 11);
    output.writeString(this.lastLoginTime);
    output.writeFieldEnd();
  }
  if (this.lastLoginIp !== null && this.lastLoginIp !== undefined) {
    output.writeFieldBegin('lastLoginIp', Thrift.Type.STRING, 12);
    output.writeString(this.lastLoginIp);
    output.writeFieldEnd();
  }
  if (this.back !== null && this.back !== undefined) {
    output.writeFieldBegin('back', Thrift.Type.STRUCT, 13);
    this.back.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccountList = module.exports.AccountList = function(args) {
  this.data = null;
  this.totalSize = null;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = Thrift.copyList(args.data, [ttypes.Account]);
    }
    if (args.totalSize !== undefined && args.totalSize !== null) {
      this.totalSize = args.totalSize;
    }
  }
};
AccountList.prototype = {};
AccountList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.data = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Account();
          elem6.read(input);
          this.data.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccountList.prototype.write = function(output) {
  output.writeStructBegin('AccountList');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
    for (var iter7 in this.data)
    {
      if (this.data.hasOwnProperty(iter7))
      {
        iter7 = this.data[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.totalSize !== null && this.totalSize !== undefined) {
    output.writeFieldBegin('totalSize', Thrift.Type.I32, 2);
    output.writeI32(this.totalSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Menu = module.exports.Menu = function(args) {
  this.id = null;
  this.pid = null;
  this.name = null;
  this.link = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = args.pid;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.link !== undefined && args.link !== null) {
      this.link = args.link;
    }
  }
};
Menu.prototype = {};
Menu.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.link = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Menu.prototype.write = function(output) {
  output.writeStructBegin('Menu');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.STRING, 2);
    output.writeString(this.pid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRING, 4);
    output.writeString(this.link);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MenuList = module.exports.MenuList = function(args) {
  this.back = null;
  this.menu = null;
  if (args) {
    if (args.back !== undefined && args.back !== null) {
      this.back = new common_ttypes.Back(args.back);
    }
    if (args.menu !== undefined && args.menu !== null) {
      this.menu = Thrift.copyList(args.menu, [ttypes.Menu]);
    }
  }
};
MenuList.prototype = {};
MenuList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.back = new common_ttypes.Back();
        this.back.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.menu = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Menu();
          elem14.read(input);
          this.menu.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MenuList.prototype.write = function(output) {
  output.writeStructBegin('MenuList');
  if (this.back !== null && this.back !== undefined) {
    output.writeFieldBegin('back', Thrift.Type.STRUCT, 1);
    this.back.write(output);
    output.writeFieldEnd();
  }
  if (this.menu !== null && this.menu !== undefined) {
    output.writeFieldBegin('menu', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.menu.length);
    for (var iter15 in this.menu)
    {
      if (this.menu.hasOwnProperty(iter15))
      {
        iter15 = this.menu[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

