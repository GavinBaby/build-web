//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Back = function(args) {
  this.code = null;
  this.text = null;
  this.spare1 = null;
  this.spare2 = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.spare1 !== undefined && args.spare1 !== null) {
      this.spare1 = args.spare1;
    }
    if (args.spare2 !== undefined && args.spare2 !== null) {
      this.spare2 = args.spare2;
    }
  }
};
Back.prototype = {};
Back.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.spare1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.spare2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Back.prototype.write = function(output) {
  output.writeStructBegin('Back');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.spare1 !== null && this.spare1 !== undefined) {
    output.writeFieldBegin('spare1', Thrift.Type.STRING, 3);
    output.writeString(this.spare1);
    output.writeFieldEnd();
  }
  if (this.spare2 !== null && this.spare2 !== undefined) {
    output.writeFieldBegin('spare2', Thrift.Type.STRING, 4);
    output.writeString(this.spare2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Page = function(args) {
  this.pageSize = null;
  this.recordStart = null;
  this.sortName = null;
  this.sortType = null;
  if (args) {
    if (args.pageSize !== undefined && args.pageSize !== null) {
      this.pageSize = args.pageSize;
    }
    if (args.recordStart !== undefined && args.recordStart !== null) {
      this.recordStart = args.recordStart;
    }
    if (args.sortName !== undefined && args.sortName !== null) {
      this.sortName = args.sortName;
    }
    if (args.sortType !== undefined && args.sortType !== null) {
      this.sortType = args.sortType;
    }
  }
};
Page.prototype = {};
Page.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pageSize = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.recordStart = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sortName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sortType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Page.prototype.write = function(output) {
  output.writeStructBegin('Page');
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.STRING, 1);
    output.writeString(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.recordStart !== null && this.recordStart !== undefined) {
    output.writeFieldBegin('recordStart', Thrift.Type.STRING, 2);
    output.writeString(this.recordStart);
    output.writeFieldEnd();
  }
  if (this.sortName !== null && this.sortName !== undefined) {
    output.writeFieldBegin('sortName', Thrift.Type.STRING, 3);
    output.writeString(this.sortName);
    output.writeFieldEnd();
  }
  if (this.sortType !== null && this.sortType !== undefined) {
    output.writeFieldBegin('sortType', Thrift.Type.STRING, 4);
    output.writeString(this.sortType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

